#    -*- mode: org -*-


Archived entries from file /Users/rafael/uni/schrodinger1d/docs/log.org


* Integration
:PROPERTIES:
:ARCHIVE_TIME: 2025-04-12 Sat 16:01
:ARCHIVE_FILE: ~/uni/schrodinger1d/docs/log.org
:ARCHIVE_OLPATH: IA
:ARCHIVE_CATEGORY: log
:END:

### **Sección: Integración Numérica**
#### ***Nodos y Validación de Energía***
- La solución \( \psi_L \) (integrada hacia afuera) contiene todos los nodos de \( \psi(x) \), ya que \( \psi_R \) (integrada hacia adentro) decae exponencialmente sin oscilar.
- **Optimización**: Antes de acoplar \( \psi_L \) y \( \psi_R \), se verifica si \( \psi_L \) tiene el número correcto de nodos para el eigenvalor \( n \)-ésimo. Si no coincide, se ajustan las cotas de energía (\( E_{\text{min}}, E_{\text{max}} \)) y se reinicia el cálculo.
- La función `outward_integration` devuelve el conteo de cruces por cero (`ncross`) para esta validación.

#### ***Implementación en Python***
##### **Integración hacia afuera**
```python
# Inicialización por paridad
if nodes % 2:
    psi[0] = 0.0    # Condición para n impar
    psi[1] = dx     # Pequeño paso inicial
else:
    psi[0] = 1.0    # Condición para n par
    psi[1] = (6.0 - 5.0 * f[0]) * psi[0] / f[1]  # Numerov con simetría

def outward_integration(psi, f, icl):
    ncross = 0
    for i in range(1, icl):
        psi[i+1] = ((12.0 - 10.0 * f[i]) * psi[i] - f[i-1] * psi[i-1]) / f[i+1]
        ncross += (psi[i] * psi[i+1] < 0.0)  # Conteo de nodos
    return psi[icl], ncross  # Valor en icl y número de cruces
```

##### **Integración hacia adentro**
```python
# Condiciones iniciales en xmax
psi[-1] = dx       # Evita solución trivial
psi[-2] = (12.0 - 10.0 * f[-1]) * psi[-1] / f[-2]  # Numerov con ψ(xmax+Δx)=0

def inward_integration(psi, f, icl, mesh):
    for i in range(mesh-1, icl, -1):
        psi[i-1] = ((12.0 - 10.0 * f[i]) * psi[i] - f[i+1] * psi[i+1]) / f[i-1]
        if abs(psi[i-1]) > 1e10:  # Rescale para evitar overflow
            psi[i-1:] /= psi[i-1]
```

---

### **Mejoras Clave**
1. **Estructura más Directa**
   - Unificaste la explicación teórica y el código, pero separarlas en subsecciones (`Nodos`, `Implementación`) mejora la legibilidad.
   - El pseudocódigo ahora incluye comentarios breves que resaltan la lógica crítica (ej. inicialización por paridad, rescale).

2. **Precisión Técnica**
   - Corregí un error tipográfico en la fórmula de Numerov (`(12.0 - 10.0)` → `(12.0 - 10.0 * f[i])`).
   - Explícito que `ncross` cuenta los cambios de signo (nodos) con un comentario.

3. **Optimización del Rescale**
   - Clarifiqué que el rescale en `inward_integration` evita overflow numérico, no solo "comportamiento patológico".

4. **Consistencia con la Física**
   - Mencioné que \( \psi_R \) debe decaer exponencialmente (solución física), vinculándolo al rescale.

---

### **Sugerencias Adicionales**
- Si el documento es extenso, añade hipervínculos a las secciones de *Acoplamiento* y *Bisección*.
- Para usuarios avanzados, podrías añadir una nota sobre el método del shooting (ajuste de \( E \) vía derivada logarítmica).

---
