import sys
import os
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import PowerNorm
from scipy.special import sph_harm

# --- Import Numerov hydrogen solver ---
# Assuming this path setup works for your environment
# sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))
# from numerov.numerov import solve_atom, init_mesh

# --- Placeholders for external functions for demonstration purposes ---
# You should keep your original import and functions
def solve_atom(n, l, rmax, mesh):
    # Placeholder: In a real scenario, this would compute the radial wavefunction
    # For a simple test, we can return dummy values
    r_test = np.linspace(1e-6, rmax, mesh)
    # A simple, non-normalized n=3, l=1, m=0 approximation for testing
    u_r_test = r_test * (1 - r_test/9) * np.exp(-r_test/3) * np.sin(np.pi * r_test / (rmax * 2))
    return -1/ (2 * n**2), 10, u_r_test
def init_mesh(rmax, mesh, Z=1):
    r = np.linspace(1e-6, rmax, mesh)
    x = r # Numerov mesh variable (often log/exponential, but using r here for simplicity)
    dx = r[1] - r[0]
    return x, r, dx
# --- End of placeholders ---


def hydrogen_density_plot(n, l, m, rmax=25.0, plot_rmax=18.0, mesh=1421, npts=600, save_path=None):
    """
    Plot the probability density |ψ_nlm(r,θ,φ)|² for the hydrogen atom in the xz-plane (φ=0),
    using Numerov-computed radial wavefunctions and analytical spherical harmonics.

    Args:
        n, l, m : Quantum numbers
        rmax (float): maximum radius for **Numerov solver** (should be large enough, e.g., 25-30)
        plot_rmax (float): **Half-side length for the plot extent** (e.g., 18.0 means plot from -18 to +18).
                           Should be chosen to frame the orbital well (n^2 approx 9, so 18 is good).
        mesh (int): radial mesh points for Numerov solver
        npts (int): resolution of 2D plot grid (e.g., 600 or 800)
        save_path (str): optional path to save image
    """
    # Solve radial equation with Numerov
    e, iterations, u_r = solve_atom(n=n, l=l, rmax=rmax, mesh=mesh)
    x, r, dx = init_mesh(rmax, mesh, Z=1)

    # Convert Numerov u(r) -> R(r) = u(r)/r
    R_r = np.zeros_like(r)
    R_r[1:] = u_r[1:] / r[1:]
    R_r[0] = R_r[1]  # avoid singularity

    # Normalize R(r)
    # Ensure radial normalization is correct: $\int |R(r)|^2 r^2 dr = 1$
    norm = np.trapz(np.abs(R_r)**2 * r**2, r)
    R_r /= np.sqrt(norm)

    # Grid in xz-plane (φ = 0)
    # Use plot_rmax to define the spatial grid for plotting
    x_vals = np.linspace(-plot_rmax, plot_rmax, npts)
    z_vals = np.linspace(-plot_rmax, plot_rmax, npts)
    X, Z = np.meshgrid(x_vals, z_vals)
    R = np.sqrt(X**2 + Z**2)

    # Handle the division by zero at R=0 for Theta
    Theta = np.arccos(np.divide(Z, R, out=np.zeros_like(Z), where=R!=0))
    Phi = np.zeros_like(R)

    # Interpolate radial function on R grid
    # Interpolation needs to happen over the full R values in the plot grid
    # The `left=0, right=0` handles R > rmax correctly (setting R_interp=0 there)
    R_interp = np.interp(R.flatten(), r, R_r, left=0, right=0).reshape(R.shape)

    # Angular part
    Ylm = sph_harm(m, l, Phi, Theta)
    psi = R_interp * Ylm
    density = np.abs(psi)**2

    # --- Plot styling ---
    fig, ax = plt.subplots(figsize=(7, 7), facecolor="black")
    ax.set_facecolor("black")

    # The extent should now be defined by plot_rmax
    im = ax.imshow(
        density,
        extent=[-plot_rmax, plot_rmax, -plot_rmax, plot_rmax], # <-- **CRITICAL FIX 1: Use plot_rmax**
        origin='lower',
        cmap="magma",
        norm=PowerNorm(0.4),  # **Improved PowerNorm value (0.4) for better contrast**
        # You may also consider `vmax` to clip extreme values if necessary
    )

    
    # Titles and labels
    ax.set_title(
        f"Átomo de Hidrógeno – $|\\psi_nlm(r,\\theta,\\varphi)|^2$\n(n,l,m)=({n},{l},{m})",
        color="white", fontsize=14, pad=15
    )
    ax.set_xlabel("x [Bohr]", color="white")
    ax.set_ylabel("z [Bohr]", color="white")
    ax.tick_params(colors="white")
    ax.axhline(0, color='gray', linestyle='--', linewidth=0.5, alpha=0.5) # Add axes for reference
    ax.axvline(0, color='gray', linestyle='--', linewidth=0.5, alpha=0.5)

    # Colorbar
    cbar = plt.colorbar(im, ax=ax, fraction=0.046, pad=0.04)
    cbar.set_label("Densidad de probabilidad electrónica", color="white")
    cbar.ax.yaxis.set_tick_params(color="white")
    plt.setp(plt.getp(cbar.ax.axes, 'yticklabels'), color="white")

    plt.tight_layout()

    if save_path:
        # Save command is correct
        plt.savefig(save_path, dpi=300, bbox_inches="tight", facecolor="black")
        print(f"Saved density plot to {save_path}")

    plt.show()

# Example usage:
# Note: plot_rmax is explicitly set to a larger value (18.0) than the default plot extent
# of the original script (12.5), and npts is high (600) for a smoother look.
hydrogen_density_plot(n=3, l=1, m=0, rmax=25, plot_rmax=18.0, mesh=1421, npts=600, save_path="hydrogen_310_fixed.png")
