(undo-tree-save-format-version . 1)
"7dc3fe181aeef7771bbb6a6987ba327aa07f0821"
[nil nil nil nil (26640 2512 904845 0) 0 nil]
([nil nil ((nil rear-nonsticky nil 1108 . 1109) (nil fontified nil 1 . 1109) (1 . 1109) (t . -1)) nil (26640 2512 904845 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -429) (undo-tree-id22 . -1) (427 . 430)) nil (26640 2512 904845 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -428) (undo-tree-id21 . -1) (428 . 429)) nil (26640 2512 904844 0) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-variable-name-face fontified nil)) . -209) (undo-tree-id19 . -1) (209 . 210) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -209) (undo-tree-id20 . -1) 210) nil (26640 2512 904843 0) 0 nil])
([nil nil ((#("6" 0 1 (fontified t)) . -212) (undo-tree-id18 . -1) 213) nil (26640 2512 904842 0) 0 nil])
([nil nil ((212 . 213)) nil (26640 2512 904842 0) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -212) (undo-tree-id17 . -1) 213) nil (26640 2512 904841 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -213) (undo-tree-id16 . -1) (212 . 214)) nil (26640 2512 904841 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -427) (undo-tree-id15 . -1) (427 . 428)) nil (26640 2512 904840 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -427) (undo-tree-id14 . -1) (427 . 428)) nil (26640 2512 904839 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 539 . 540) (nil fontified nil 427 . 540) (427 . 540)) nil (26640 2512 904839 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -427)) nil (26640 2512 904838 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -428) (undo-tree-id13 . -1) (426 . 429)) nil (26640 2512 904838 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -427) (undo-tree-id12 . -1) (427 . 428)) nil (26640 2512 904837 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 431 . 432) (#("
" 0 1 (fontified nil)) . -486) (427 . 487)) nil (26640 2512 904837 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 613 . 614) (nil fontified nil 487 . 614) (487 . 614)) nil (26640 2512 904884 0) 0 nil])
([nil nil ((#("    " 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t)) . -428) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . -4) (undo-tree-id120 . -4) 432) nil (26640 2523 608426 0) 0 nil] [nil nil ((#("    " 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t)) . -428) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4)) ((428 . 432)) (26640 2512 904834 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -483) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -4) (undo-tree-id73 . -4) (undo-tree-id74 . -4) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) (undo-tree-id84 . -4) (undo-tree-id85 . -4) (undo-tree-id86 . -4) 487) nil (26640 2523 608414 0) 0 nil])
nil
([nil nil ((#("    " 0 4 (fontified t)) . -521) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) (undo-tree-id65 . -4) (undo-tree-id66 . -4) (undo-tree-id67 . -4) (undo-tree-id68 . -4) (undo-tree-id69 . -4) 525) nil (26640 2523 608409 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 601) (undo-tree-id52 . -1)) nil (26640 2523 608403 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 605 . 606) (#("
" 0 1 (fontified nil)) . -651) (601 . 652)) nil (26640 2523 608402 0) 0 nil])
([nil nil ((#("    " 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t)) . -602) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) 606) nil (26640 2523 608402 0) 0 nil])
([nil nil ((647 . 648) 606) nil (26640 2523 608474 0) 0 nil])
([nil nil ((#("{theoretical_energy:15.6f} {error:15.4e}" 0 26 (face nil fontified t) 26 27 (face font-lock-string-face fontified t) 27 40 (face nil fontified t)) . 678) (undo-tree-id235 . -39) (undo-tree-id236 . -39) (undo-tree-id237 . -39)) nil (26640 2563 875237 0) 0 nil] [nil nil ((#("j" 0 1 (fontified nil)) . -648) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (648 . 649)) ((#("j" 0 1 (fontified nil)) . 648) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (648 . 649)) (26640 2523 608392 0) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . 678) (undo-tree-id234 . 1)) nil (26640 2563 875236 0) 0 nil])
nil
([nil nil ((#("{'Theoretical':>15} {'Error':>15}" 0 15 (face nil fontified t) 15 16 (face font-lock-operator-face fontified t) 16 19 (face nil fontified t) 19 20 (face font-lock-string-face fontified t) 20 29 (face nil fontified t) 29 30 (face font-lock-operator-face fontified t) 30 33 (face nil fontified t)) . 337) (undo-tree-id230 . -32) (undo-tree-id231 . -32) (undo-tree-id232 . -32) (undo-tree-id233 . -32) 369) nil (26640 2563 875236 0) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . 337) (undo-tree-id229 . 1)) nil (26640 2563 875234 0) 0 nil])
([nil nil ((#("s" 0 1 (face nil fontified t)) . 261)) nil (26640 2563 875233 0) 0 nil])
([nil nil ((#("
for n in range(0,states):
    state = n + 1
    theoretical_energy = -1 / state**2

    # Time the function execution
    # timer = timeit.Timer(lambda: solve_atom_bisection(n=state, l=l))
    timer = timeit.Timer(lambda: solve_atom(n=state, l=l))
    runs = 3  # Number of runs to average
    time_taken = timer.timeit(number=runs) / runs * 1000  # Convert to milliseconds

    # Get the actual result
    # e, iterations = solve_atom_bisection(n=state, l=l)
    e, iterations, psi = solve_atom(n=state, l=l)

    error = abs(e - theoretical_energy)

    print(f\"{state:3d} {e:15.8f} {theoretical_energy:15.6f} {error:15.4e} {iterations:12d} {time_taken:12.3f}\")

" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 7 (fontified t) 7 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 15 (face font-lock-builtin-face fontified t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t) 16 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t) 25 31 (fontified t) 31 36 (face font-lock-variable-name-face fontified t) 36 37 (fontified t) 37 38 (face font-lock-operator-face fontified t) 38 41 (fontified t) 41 42 (face font-lock-operator-face fontified t) 42 49 (fontified t) 49 67 (face font-lock-variable-name-face fontified t) 67 68 (fontified t) 68 69 (face font-lock-operator-face fontified t) 69 70 (fontified t) 70 71 (face font-lock-operator-face fontified t) 71 73 (fontified t) 73 74 (face font-lock-operator-face fontified t) 74 80 (fontified t) 80 82 (face font-lock-operator-face fontified t) 82 89 (fontified t) 89 91 (face font-lock-comment-delimiter-face fontified t) 91 119 (face font-lock-comment-face fontified t) 119 123 (fontified t) 123 125 (face font-lock-comment-delimiter-face fontified t) 125 190 (face font-lock-comment-face fontified t) 190 194 (fontified t) 194 199 (face font-lock-variable-name-face fontified t) 199 200 (fontified t) 200 201 (face font-lock-operator-face fontified t) 201 214 (fontified t) 214 215 (face (rainbow-delimiters-depth-1-face) fontified t) 215 221 (face font-lock-keyword-face fontified t) 221 233 (fontified t) 233 234 (face (rainbow-delimiters-depth-2-face) fontified t) 234 235 (fontified t) 235 236 (face font-lock-operator-face fontified t) 236 244 (fontified t) 244 245 (face font-lock-operator-face fontified t) 245 246 (fontified t) 246 247 (face (rainbow-delimiters-depth-2-face) fontified t) 247 248 (face (rainbow-delimiters-depth-1-face) fontified t) 248 253 (fontified t) 253 257 (face font-lock-variable-name-face fontified t) 257 258 (fontified t) 258 259 (face font-lock-operator-face fontified t) 259 263 (fontified t) 263 265 (face font-lock-comment-delimiter-face fontified t) 265 291 (face font-lock-comment-face fontified t) 291 295 (fontified t) 295 305 (face font-lock-variable-name-face fontified t) 305 306 (fontified t) 306 307 (face font-lock-operator-face fontified t) 307 320 (fontified t) 320 321 (face (rainbow-delimiters-depth-1-face) fontified t) 321 327 (fontified t) 327 328 (face font-lock-operator-face fontified t) 328 332 (fontified t) 332 333 (face (rainbow-delimiters-depth-1-face) fontified t) 333 334 (fontified t) 334 335 (face font-lock-operator-face fontified t) 335 341 (fontified t) 341 342 (face font-lock-operator-face fontified t) 342 349 (fontified t) 349 351 (face font-lock-comment-delimiter-face fontified t) 351 375 (face font-lock-comment-face fontified t) 375 380 (fontified t) 380 382 (face font-lock-comment-delimiter-face fontified t) 382 404 (face font-lock-comment-face fontified t) 404 408 (fontified t) 408 410 (face font-lock-comment-delimiter-face fontified t) 410 461 (face font-lock-comment-face fontified t) 461 465 (fontified t) 465 466 (face font-lock-variable-name-face fontified t) 466 468 (fontified t) 468 478 (face font-lock-variable-name-face fontified t) 478 480 (fontified t) 480 483 (face font-lock-variable-name-face fontified t) 483 484 (fontified t) 484 485 (face font-lock-operator-face fontified t) 485 496 (fontified t) 496 497 (face (rainbow-delimiters-depth-1-face) fontified t) 497 498 (fontified t) 498 499 (face font-lock-operator-face fontified t) 499 507 (fontified t) 507 508 (face font-lock-operator-face fontified t) 508 509 (fontified t) 509 510 (face (rainbow-delimiters-depth-1-face) fontified t) 510 516 (fontified t) 516 521 (face font-lock-variable-name-face fontified t) 521 522 (fontified t) 522 523 (face font-lock-operator-face fontified t) 523 524 (fontified t) 524 527 (face font-lock-builtin-face fontified t) 527 528 (face (rainbow-delimiters-depth-1-face) fontified t) 528 530 (fontified t) 530 531 (face font-lock-operator-face fontified t) 531 550 (fontified t) 550 551 (face (rainbow-delimiters-depth-1-face) fontified t) 551 557 (fontified t) 557 562 (face font-lock-builtin-face fontified t) 562 563 (face (rainbow-delimiters-depth-1-face) fontified t) 563 564 (fontified t) 564 565 (face font-lock-string-face fontified t) 565 575 (face nil fontified t) 575 576 (face font-lock-string-face fontified t) 576 585 (face nil fontified t) 585 586 (face font-lock-string-face fontified t) 586 612 (face nil fontified t) 612 613 (face font-lock-string-face fontified t) 613 626 (face nil fontified t) 626 627 (face font-lock-string-face fontified t) 627 643 (face nil fontified t) 643 644 (face font-lock-string-face fontified t) 644 662 (face nil fontified t) 662 663 (face font-lock-string-face fontified t) 663 664 (face (rainbow-delimiters-depth-1-face) fontified t) 664 666 (fontified t)) . 683) (undo-tree-id127 . -665) (undo-tree-id128 . -665) (undo-tree-id129 . -665) (undo-tree-id130 . -665) (undo-tree-id131 . -375) (undo-tree-id132 . -665) (undo-tree-id133 . -84) (undo-tree-id134 . -84) (undo-tree-id135 . -84) (undo-tree-id136 . -84) (undo-tree-id137 . -84) (undo-tree-id138 . -85) (undo-tree-id139 . -85) (undo-tree-id140 . -85) (undo-tree-id141 . -85) (undo-tree-id142 . -85) (undo-tree-id143 . -119) (undo-tree-id144 . -119) (undo-tree-id145 . -119) (undo-tree-id146 . -119) (undo-tree-id147 . -119) (undo-tree-id148 . -190) (undo-tree-id149 . -190) (undo-tree-id150 . -190) (undo-tree-id151 . -190) (undo-tree-id152 . -190) (undo-tree-id153 . -249) (undo-tree-id154 . -249) (undo-tree-id155 . -249) (undo-tree-id156 . -249) (undo-tree-id157 . -249) (undo-tree-id158 . -291) (undo-tree-id159 . -291) (undo-tree-id160 . -291) (undo-tree-id161 . -291) (undo-tree-id162 . -291) (undo-tree-id163 . -375) (undo-tree-id164 . -375) (undo-tree-id165 . -375) (undo-tree-id166 . -375) (undo-tree-id167 . -375) (undo-tree-id168 . -376) (undo-tree-id169 . -376) (undo-tree-id170 . -376) (undo-tree-id171 . -376) (undo-tree-id172 . -376) (undo-tree-id173 . -404) (undo-tree-id174 . -404) (undo-tree-id175 . -404) (undo-tree-id176 . -404) (undo-tree-id177 . -404) (undo-tree-id178 . -461) (undo-tree-id179 . -461) (undo-tree-id180 . -461) (undo-tree-id181 . -461) (undo-tree-id182 . -461) (undo-tree-id183 . -511) (undo-tree-id184 . -511) (undo-tree-id185 . -511) (undo-tree-id186 . -511) (undo-tree-id187 . -511) (undo-tree-id188 . -512) (undo-tree-id189 . -512) (undo-tree-id190 . -512) (undo-tree-id191 . -512) (undo-tree-id192 . -512) (undo-tree-id193 . -552) (undo-tree-id194 . -552) (undo-tree-id195 . -552) (undo-tree-id196 . -552) (undo-tree-id197 . -552) (undo-tree-id198 . -553) (undo-tree-id199 . -553) (undo-tree-id200 . -553) (undo-tree-id201 . -553) (undo-tree-id202 . -553) (undo-tree-id203 . -648) (undo-tree-id204 . -648) (undo-tree-id205 . -648) (undo-tree-id206 . -648) (undo-tree-id207 . -648) (undo-tree-id208 . -648) (undo-tree-id209 . -665) (undo-tree-id210 . -665) (undo-tree-id211 . -665) (undo-tree-id212 . -665) (undo-tree-id213 . -665) (undo-tree-id214 . -665) (undo-tree-id215 . -666) (undo-tree-id216 . -666) (undo-tree-id217 . -666) (undo-tree-id218 . -666) (undo-tree-id219 . -666) (undo-tree-id220 . -665) (undo-tree-id221 . -665) (undo-tree-id222 . -665) (undo-tree-id223 . -665) (undo-tree-id224 . -665) (undo-tree-id225 . -665) (undo-tree-id226 . -665) (undo-tree-id227 . -665) (undo-tree-id228 . -666) 1348) nil (26640 2563 875230 0) 0 nil])
([nil nil ((#("timer = timeit.Timer(lambda: solve_atom(n=state, l=l))
runs = 3  # Number of runs to average
time_taken = timer.timeit(number=runs) / runs * 1000  # Convert to milliseconds

" 0 5 (face font-lock-variable-name-face fontified t) 5 6 (fontified t) 6 7 (face font-lock-operator-face fontified t) 7 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t) 21 27 (face font-lock-keyword-face fontified t) 27 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-2-face) fontified t) 40 41 (fontified t) 41 42 (face font-lock-operator-face fontified t) 42 50 (fontified t) 50 51 (face font-lock-operator-face fontified t) 51 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-2-face) fontified t) 53 54 (face (rainbow-delimiters-depth-1-face) fontified t) 54 55 (fontified t) 55 59 (face font-lock-variable-name-face fontified t) 59 60 (fontified t) 60 61 (face font-lock-operator-face fontified t) 61 65 (fontified t) 65 67 (face font-lock-comment-delimiter-face fontified t) 67 93 (face font-lock-comment-face fontified t) 93 103 (face font-lock-variable-name-face fontified t) 103 104 (fontified t) 104 105 (face font-lock-operator-face fontified t) 105 118 (fontified t) 118 119 (face (rainbow-delimiters-depth-1-face) fontified t) 119 125 (fontified t) 125 126 (face font-lock-operator-face fontified t) 126 130 (fontified t) 130 131 (face (rainbow-delimiters-depth-1-face) fontified t) 131 132 (fontified t) 132 133 (face font-lock-operator-face fontified t) 133 139 (fontified t) 139 140 (face font-lock-operator-face fontified t) 140 147 (fontified t) 147 149 (face font-lock-comment-delimiter-face fontified t) 149 173 (face font-lock-comment-face fontified t) 173 174 (fontified t)) . 393) (undo-tree-id298 . -173) (undo-tree-id299 . -173) (undo-tree-id300 . -173) (undo-tree-id301 . -55) (undo-tree-id302 . -52) (undo-tree-id303 . -52) (t 26640 2563 877180 394000)) nil (26640 2679 798176 0) 0 nil])
([nil nil ((#(" {time_taken:12.3f}" 0 1 (face font-lock-string-face fontified t) 1 19 (face nil fontified t)) . 485) (undo-tree-id295 . -18) (undo-tree-id296 . -18) (undo-tree-id297 . -18)) nil (26640 2679 798173 0) 0 nil])
([nil nil ((#(" {'Time (ms)':>12}" 0 1 (face font-lock-string-face fontified t) 1 14 (face nil fontified t) 14 15 (face font-lock-operator-face fontified t) 15 18 (face nil fontified t)) . 354) (undo-tree-id238 . -17) (undo-tree-id239 . -17) (undo-tree-id240 . -17) (undo-tree-id241 . -8) (undo-tree-id242 . -8) (undo-tree-id243 . -8) (undo-tree-id244 . -8) (undo-tree-id245 . -8) (undo-tree-id246 . -8) (undo-tree-id247 . -7) (undo-tree-id248 . -7) (undo-tree-id249 . -7) (undo-tree-id250 . -7) (undo-tree-id251 . -7) (undo-tree-id252 . -7) (undo-tree-id253 . -6) (undo-tree-id254 . -6) (undo-tree-id255 . -6) (undo-tree-id256 . -6) (undo-tree-id257 . -6) (undo-tree-id258 . -6) (undo-tree-id259 . -5) (undo-tree-id260 . -5) (undo-tree-id261 . -5) (undo-tree-id262 . -5) (undo-tree-id263 . -5) (undo-tree-id264 . -5) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -3) (undo-tree-id272 . -3) (undo-tree-id273 . -3) (undo-tree-id274 . -3) (undo-tree-id275 . -3) (undo-tree-id276 . -3) (undo-tree-id277 . -2) (undo-tree-id278 . -2) (undo-tree-id279 . -2) (undo-tree-id280 . -2) (undo-tree-id281 . -2) (undo-tree-id282 . -2) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -18)) nil (26640 2679 798170 0) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -212) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) 213 (t 26640 2679 801393 75000)) nil (26640 3007 987718 0) 0 nil])
([nil current ((#("j" 0 1 (fontified nil)) . -213) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (212 . 214)) nil (26640 3007 987713 0) 0 nil])
nil
