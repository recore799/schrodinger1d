(undo-tree-save-format-version . 1)
"ce138bd61b5d7d264f7fceac34669029276f1189"
[nil nil nil nil (26634 53582 210613 0) 0 nil]
([nil nil ((nil rear-nonsticky nil 1187 . 1188) (nil fontified nil 1 . 1188) (1 . 1188) (t . -1)) nil (26634 53582 210613 0) 0 nil])
([nil nil ((#("_table" 0 6 (face font-lock-function-name-face fontified t)) . 214) (undo-tree-id435 . -5) (undo-tree-id436 . -5) (undo-tree-id437 . -5) (undo-tree-id438 . -5) 219) nil (26634 53582 210612 0) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-function-name-face fontified nil)) . -217) (undo-tree-id434 . -1) (214 . 218)) nil (26634 53582 210611 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1169) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("a" 0 1 (fontified t)) . -1170) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (#("b" 0 1 (fontified t)) . -1171) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("l" 0 1 (fontified t)) . -1172) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#("e" 0 1 (fontified t)) . -1173) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) 1174) nil (26634 53582 210609 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -1171) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (1169 . 1172)) nil (26634 53583 51407 0) 0 nil])
([nil nil ((#("    print(\"\\nTesting harmonic_oscillator for {} states\".format(states))
    print(\"-\" * 78)
    print(\"{:>3} {:>15} {:>15} {:>15} {:>12} {:>12}\".format(
        \"n\", \"Energy (ħω)\", \"Theoretical\", \"Error\", \"Iterations\", \"Time (ms)\"))
    print(\"-\" * 78)

" 0 4 (fontified t) 4 9 (face font-lock-builtin-face fontified t) 9 10 (face (rainbow-delimiters-depth-1-face) fontified t) 10 11 (face font-lock-string-face fontified t) 11 13 (face font-lock-constant-face fontified t) 13 55 (face font-lock-string-face fontified t) 55 56 (fontified t) 56 62 (face font-lock-builtin-face fontified t) 62 63 (face (rainbow-delimiters-depth-2-face) fontified t) 63 69 (fontified t) 69 70 (face (rainbow-delimiters-depth-2-face) fontified t) 70 71 (face (rainbow-delimiters-depth-1-face) fontified t) 71 76 (fontified t) 76 81 (face font-lock-builtin-face fontified t) 81 82 (face (rainbow-delimiters-depth-1-face) fontified t) 82 85 (face font-lock-string-face fontified t) 85 86 (fontified t) 86 87 (face font-lock-operator-face fontified t) 87 90 (fontified t) 90 91 (face (rainbow-delimiters-depth-1-face) fontified t) 91 96 (fontified t) 96 101 (face font-lock-builtin-face fontified t) 101 102 (face (rainbow-delimiters-depth-1-face) fontified t) 102 144 (face font-lock-string-face fontified t) 144 145 (fontified t) 145 151 (face font-lock-builtin-face fontified t) 151 152 (face (rainbow-delimiters-depth-2-face) fontified t) 152 161 (fontified t) 161 164 (face font-lock-string-face fontified t) 164 166 (fontified t) 166 179 (face font-lock-string-face fontified t) 179 181 (fontified t) 181 194 (face font-lock-string-face fontified t) 194 196 (fontified t) 196 203 (face font-lock-string-face fontified t) 203 205 (fontified t) 205 217 (face font-lock-string-face fontified t) 217 219 (fontified t) 219 230 (face font-lock-string-face fontified t) 230 231 (face (rainbow-delimiters-depth-2-face) fontified t) 231 232 (face (rainbow-delimiters-depth-1-face) fontified t) 232 237 (fontified t) 237 242 (face font-lock-builtin-face fontified t) 242 243 (face (rainbow-delimiters-depth-1-face) fontified t) 243 246 (face font-lock-string-face fontified t) 246 247 (fontified t) 247 248 (face font-lock-operator-face fontified t) 248 251 (fontified t) 251 252 (face (rainbow-delimiters-depth-1-face) fontified t) 252 254 (fontified t)) . 296) (undo-tree-id1122 . -253) (undo-tree-id1123 . -253) (undo-tree-id1124 . -253) (undo-tree-id1125 . -254) (undo-tree-id1126 . -254) (undo-tree-id1127 . -254) (undo-tree-id1128 . -254) (undo-tree-id1129 . -254) (undo-tree-id1130 . -253) (undo-tree-id1131 . -253) (undo-tree-id1132 . -253) (undo-tree-id1133 . -253) (undo-tree-id1134 . -253) (undo-tree-id1135 . -233) (undo-tree-id1136 . -233) (undo-tree-id1137 . -233) (undo-tree-id1138 . -233) (undo-tree-id1139 . -233) (undo-tree-id1140 . -153) (undo-tree-id1141 . -153) (undo-tree-id1142 . -153) (undo-tree-id1143 . -153) (undo-tree-id1144 . -153) (undo-tree-id1145 . -92) (undo-tree-id1146 . -92) (undo-tree-id1147 . -92) (undo-tree-id1148 . -92) (undo-tree-id1149 . -92) (undo-tree-id1150 . -72) (undo-tree-id1151 . -72) (undo-tree-id1152 . -72) (undo-tree-id1153 . -72) (undo-tree-id1154 . -72) (undo-tree-id1155 . -4) (undo-tree-id1156 . -4) (undo-tree-id1157 . -76) (undo-tree-id1158 . -76) (undo-tree-id1159 . -96) (undo-tree-id1160 . -96) (undo-tree-id1161 . -96) (undo-tree-id1162 . -96) (undo-tree-id1163 . -96) (undo-tree-id1164 . -96) (undo-tree-id1165 . -96) (undo-tree-id1166 . -96) (undo-tree-id1167 . -96) (undo-tree-id1168 . -96) (undo-tree-id1169 . -96) (undo-tree-id1170 . -96) (undo-tree-id1171 . -96) (undo-tree-id1172 . -96) (undo-tree-id1173 . -96) (undo-tree-id1174 . -96) (undo-tree-id1175 . -96) (undo-tree-id1176 . -96) (undo-tree-id1177 . -96) (undo-tree-id1178 . -96) (undo-tree-id1179 . -237) (undo-tree-id1180 . -237) (undo-tree-id1181 . -72) (undo-tree-id1182 . -72) (undo-tree-id1183 . -72) (undo-tree-id1184 . -72) (undo-tree-id1185 . -72) (undo-tree-id1186 . -72) (undo-tree-id1187 . -72) (undo-tree-id1188 . -92) (undo-tree-id1189 . -92) (undo-tree-id1190 . -92) (undo-tree-id1191 . -92) (undo-tree-id1192 . -92) (undo-tree-id1193 . -153) (undo-tree-id1194 . -153) (undo-tree-id1195 . -153) (undo-tree-id1196 . -153) (undo-tree-id1197 . -153) (undo-tree-id1198 . -233) (undo-tree-id1199 . -233) (undo-tree-id1200 . -233) (undo-tree-id1201 . -233) (undo-tree-id1202 . -233) (undo-tree-id1203 . -253) (undo-tree-id1204 . -253) (undo-tree-id1205 . -253) (undo-tree-id1206 . -253) (undo-tree-id1207 . -253) (undo-tree-id1208 . -253) (undo-tree-id1209 . -253) (undo-tree-id1210 . -253) (undo-tree-id1211 . -254) 549) nil (26634 53620 866493 0) 0 nil] [nil nil ((#("    \"\"\"Generate formatted table of harmonic oscillator energies\"\"\"
    print(\"\\nTesting harmonic_oscillator for {} states\".format(states))
    print(\"-\" * 78)
    print(\"{:>3} {:>15} {:>15} {:>15} {:>12} {:>12}\".format(
        \"n\", \"Energy (ħω)\", \"Theoretical\", \"Error\", \"Iterations\", \"Time (ms)\"))
    print(\"-\" * 78)

    for i in range(states):
        # Theoretical energy E_n = (n + 0.5)
        theoretical = i + 0.5

        # Time the calculation
        timer = timeit.Timer(lambda: harmonic_oscillator(nodes=i))
        time_ms = timer.timeit(number=10) * 100  # Average time in ms

        # Get the actual result
        e, iterations = harmonic_oscillator(nodes=i)
        error = abs(e - theoretical)

        print(\"{:3d} {:15.8f} {:15.8f} {:15.2e} {:12d} {:12.3f}\".format(
            i, e, theoretical, error, iterations, time_ms))

    print(\"-\" * 78)

" 0 4 (fontified t) 4 6 (face font-lock-doc-face fontified t) 6 7 (face font-lock-doc-face fontified t syntax-table (15)) 7 63 (face font-lock-doc-face fontified t) 63 64 (face font-lock-doc-face fontified t syntax-table (15)) 64 66 (face font-lock-doc-face fontified t) 66 71 (fontified t) 71 76 (face font-lock-builtin-face fontified t) 76 77 (face (rainbow-delimiters-depth-1-face) fontified t) 77 78 (face font-lock-string-face fontified t) 78 80 (face font-lock-constant-face fontified t) 80 122 (face font-lock-string-face fontified t) 122 123 (fontified t) 123 129 (face font-lock-builtin-face fontified t) 129 130 (face (rainbow-delimiters-depth-2-face) fontified t) 130 136 (fontified t) 136 137 (face (rainbow-delimiters-depth-2-face) fontified t) 137 138 (face (rainbow-delimiters-depth-1-face) fontified t) 138 143 (fontified t) 143 148 (face font-lock-builtin-face fontified t) 148 149 (face (rainbow-delimiters-depth-1-face) fontified t) 149 152 (face font-lock-string-face fontified t) 152 153 (fontified t) 153 154 (face font-lock-operator-face fontified t) 154 157 (fontified t) 157 158 (face (rainbow-delimiters-depth-1-face) fontified t) 158 163 (fontified t) 163 168 (face font-lock-builtin-face fontified t) 168 169 (face (rainbow-delimiters-depth-1-face) fontified t) 169 211 (face font-lock-string-face fontified t) 211 212 (fontified t) 212 218 (face font-lock-builtin-face fontified t) 218 219 (face (rainbow-delimiters-depth-2-face) fontified t) 219 228 (fontified t) 228 231 (face font-lock-string-face fontified t) 231 233 (fontified t) 233 246 (face font-lock-string-face fontified t) 246 248 (fontified t) 248 261 (face font-lock-string-face fontified t) 261 263 (fontified t) 263 270 (face font-lock-string-face fontified t) 270 272 (fontified t) 272 284 (face font-lock-string-face fontified t) 284 286 (fontified t) 286 297 (face font-lock-string-face fontified t) 297 298 (face (rainbow-delimiters-depth-2-face) fontified t) 298 299 (face (rainbow-delimiters-depth-1-face) fontified t) 299 304 (fontified t) 304 309 (face font-lock-builtin-face fontified t) 309 310 (face (rainbow-delimiters-depth-1-face) fontified t) 310 313 (face font-lock-string-face fontified t) 313 314 (fontified t) 314 315 (face font-lock-operator-face fontified t) 315 318 (fontified t) 318 319 (face (rainbow-delimiters-depth-1-face) fontified t) 319 325 (fontified t) 325 328 (face font-lock-keyword-face fontified t) 328 331 (fontified t) 331 333 (face font-lock-keyword-face fontified t) 333 334 (fontified t) 334 339 (face font-lock-builtin-face fontified t) 339 340 (face (rainbow-delimiters-depth-1-face) fontified t) 340 346 (fontified t) 346 347 (face (rainbow-delimiters-depth-1-face) fontified t) 347 357 (fontified t) 357 359 (face font-lock-comment-delimiter-face fontified t) 359 394 (face font-lock-comment-face fontified t) 394 402 (fontified t) 402 413 (face font-lock-variable-name-face fontified t) 413 414 (fontified t) 414 415 (face font-lock-operator-face fontified t) 415 418 (fontified t) 418 419 (face font-lock-operator-face fontified t) 419 433 (fontified t) 433 435 (face font-lock-comment-delimiter-face fontified t) 435 456 (face font-lock-comment-face fontified t) 456 464 (fontified t) 464 469 (face font-lock-variable-name-face fontified t) 469 470 (fontified t) 470 471 (face font-lock-operator-face fontified t) 471 484 (fontified t) 484 485 (face (rainbow-delimiters-depth-1-face) fontified t) 485 491 (face font-lock-keyword-face fontified t) 491 512 (fontified t) 512 513 (face (rainbow-delimiters-depth-2-face) fontified t) 513 518 (fontified t) 518 519 (face font-lock-operator-face fontified t) 519 520 (fontified t) 520 521 (face (rainbow-delimiters-depth-2-face) fontified t) 521 522 (face (rainbow-delimiters-depth-1-face) fontified t) 522 531 (fontified t) 531 538 (face font-lock-variable-name-face fontified t) 538 539 (fontified t) 539 540 (face font-lock-operator-face fontified t) 540 553 (fontified t) 553 554 (face (rainbow-delimiters-depth-1-face) fontified t) 554 560 (fontified t) 560 561 (face font-lock-operator-face fontified t) 561 563 (fontified t) 563 564 (face (rainbow-delimiters-depth-1-face) fontified t) 564 565 (fontified t) 565 566 (face font-lock-operator-face fontified t) 566 572 (fontified t) 572 574 (face font-lock-comment-delimiter-face fontified t) 574 593 (face font-lock-comment-face fontified t) 593 602 (fontified t) 602 604 (face font-lock-comment-delimiter-face fontified t) 604 626 (face font-lock-comment-face fontified t) 626 634 (fontified t) 634 635 (face font-lock-variable-name-face fontified t) 635 637 (fontified t) 637 647 (face font-lock-variable-name-face fontified t) 647 648 (fontified t) 648 649 (face font-lock-operator-face fontified t) 649 669 (fontified t) 669 670 (face (rainbow-delimiters-depth-1-face) fontified t) 670 675 (fontified t) 675 676 (face font-lock-operator-face fontified t) 676 677 (fontified t) 677 678 (face (rainbow-delimiters-depth-1-face) fontified t) 678 687 (fontified t) 687 692 (face font-lock-variable-name-face fontified t) 692 693 (fontified t) 693 694 (face font-lock-operator-face fontified t) 694 695 (fontified t) 695 698 (face font-lock-builtin-face fontified t) 698 699 (face (rainbow-delimiters-depth-1-face) fontified t) 699 701 (fontified t) 701 702 (face font-lock-operator-face fontified t) 702 714 (fontified t) 714 715 (face (rainbow-delimiters-depth-1-face) fontified t) 715 725 (fontified t) 725 730 (face font-lock-builtin-face fontified t) 730 731 (face (rainbow-delimiters-depth-1-face) fontified t) 731 781 (face font-lock-string-face fontified t) 781 782 (fontified t) 782 788 (face font-lock-builtin-face fontified t) 788 789 (face (rainbow-delimiters-depth-2-face) fontified t) 789 847 (fontified t) 847 848 (face (rainbow-delimiters-depth-2-face) fontified t) 848 849 (face (rainbow-delimiters-depth-1-face) fontified t) 849 855 (fontified t) 855 860 (face font-lock-builtin-face fontified t) 860 861 (face (rainbow-delimiters-depth-1-face) fontified t) 861 864 (face font-lock-string-face fontified t) 864 865 (fontified t) 865 866 (face font-lock-operator-face fontified t) 866 869 (fontified t) 869 870 (face (rainbow-delimiters-depth-1-face) fontified t) 870 872 (fontified t)) . 229) (undo-tree-id31 . -871) (undo-tree-id32 . -871) (undo-tree-id33 . -871) (undo-tree-id34 . -619) (undo-tree-id35 . -619) (undo-tree-id36 . -619) (undo-tree-id37 . -619) (undo-tree-id38 . -619) (undo-tree-id39 . -619) (undo-tree-id40 . -651) (undo-tree-id41 . -651) (undo-tree-id42 . -651) (undo-tree-id43 . -651) (undo-tree-id44 . -651) (undo-tree-id45 . -704) (undo-tree-id46 . -704) (undo-tree-id47 . -704) (undo-tree-id48 . -704) (undo-tree-id49 . -704) (undo-tree-id50 . -716) (undo-tree-id51 . -716) (undo-tree-id52 . -716) (undo-tree-id53 . -716) (undo-tree-id54 . -716) (undo-tree-id55 . -716) (undo-tree-id56 . -742) (undo-tree-id57 . -742) (undo-tree-id58 . -742) (undo-tree-id59 . -742) (undo-tree-id60 . -742) (undo-tree-id61 . -742) (undo-tree-id62 . -815) (undo-tree-id63 . -815) (undo-tree-id64 . -815) (undo-tree-id65 . -815) (undo-tree-id66 . -815) (undo-tree-id67 . -850) (undo-tree-id68 . -850) (undo-tree-id69 . -850) (undo-tree-id70 . -850) (undo-tree-id71 . -850) (undo-tree-id72 . -850) (undo-tree-id73 . -869) (undo-tree-id74 . -869) (undo-tree-id75 . -869) (undo-tree-id76 . -869) (undo-tree-id77 . -869) (undo-tree-id78 . -869) (undo-tree-id79 . -871) (undo-tree-id80 . -871) (undo-tree-id81 . -871) (undo-tree-id82 . -871) (undo-tree-id83 . -871) (undo-tree-id84 . -871) (undo-tree-id85 . -871) (undo-tree-id86 . -871) (undo-tree-id87 . -871) (undo-tree-id88 . -871) (undo-tree-id89 . -871) (undo-tree-id90 . -871) (undo-tree-id91 . -869) (undo-tree-id92 . -869) (undo-tree-id93 . -869) (undo-tree-id94 . -869) (undo-tree-id95 . -869) (undo-tree-id96 . -869) (undo-tree-id97 . -869) (undo-tree-id98 . -869) (undo-tree-id99 . -869) (undo-tree-id100 . -869) (undo-tree-id101 . -869) (undo-tree-id102 . -871) (undo-tree-id103 . -871) (undo-tree-id104 . -871) (undo-tree-id105 . -871) (undo-tree-id106 . -871) (undo-tree-id107 . -871) (undo-tree-id108 . -871) (undo-tree-id109 . -871) (undo-tree-id110 . -871) (undo-tree-id111 . -871) (undo-tree-id112 . -871) (undo-tree-id113 . -871) (undo-tree-id114 . -871) (undo-tree-id115 . -871) (undo-tree-id116 . -871) (undo-tree-id117 . -871) (undo-tree-id118 . -871) (undo-tree-id119 . -871) (undo-tree-id120 . -871) (undo-tree-id121 . -871) (undo-tree-id122 . -871) (undo-tree-id123 . -871) (undo-tree-id124 . -871) (undo-tree-id125 . -851) (undo-tree-id126 . -851) (undo-tree-id127 . -851) (undo-tree-id128 . -851) (undo-tree-id129 . -851) (undo-tree-id130 . -851) (undo-tree-id131 . -851) (undo-tree-id132 . -850) (undo-tree-id133 . -850) (undo-tree-id134 . -850) (undo-tree-id135 . -850) (undo-tree-id136 . -850) (undo-tree-id137 . -790) (undo-tree-id138 . -790) (undo-tree-id139 . -790) (undo-tree-id140 . -790) (undo-tree-id141 . -790) (undo-tree-id142 . -717) (undo-tree-id143 . -717) (undo-tree-id144 . -717) (undo-tree-id145 . -717) (undo-tree-id146 . -717) (undo-tree-id147 . -716) (undo-tree-id148 . -716) (undo-tree-id149 . -716) (undo-tree-id150 . -716) (undo-tree-id151 . -716) (undo-tree-id152 . -679) (undo-tree-id153 . -679) (undo-tree-id154 . -679) (undo-tree-id155 . -679) (undo-tree-id156 . -679) (undo-tree-id157 . -626) (undo-tree-id158 . -626) (undo-tree-id159 . -626) (undo-tree-id160 . -626) (undo-tree-id161 . -626) (undo-tree-id162 . -594) (undo-tree-id163 . -594) (undo-tree-id164 . -594) (undo-tree-id165 . -594) (undo-tree-id166 . -594) (undo-tree-id167 . -593) (undo-tree-id168 . -593) (undo-tree-id169 . -593) (undo-tree-id170 . -593) (undo-tree-id171 . -593) (undo-tree-id172 . -523) (undo-tree-id173 . -523) (undo-tree-id174 . -523) (undo-tree-id175 . -523) (undo-tree-id176 . -523) (undo-tree-id177 . -456) (undo-tree-id178 . -456) (undo-tree-id179 . -456) (undo-tree-id180 . -456) (undo-tree-id181 . -456) (undo-tree-id182 . -425) (undo-tree-id183 . -425) (undo-tree-id184 . -425) (undo-tree-id185 . -425) (undo-tree-id186 . -425) (undo-tree-id187 . -424) (undo-tree-id188 . -424) (undo-tree-id189 . -424) (undo-tree-id190 . -424) (undo-tree-id191 . -424) (undo-tree-id192 . -394) (undo-tree-id193 . -394) (undo-tree-id194 . -394) (undo-tree-id195 . -394) (undo-tree-id196 . -394) (undo-tree-id197 . -349) (undo-tree-id198 . -349) (undo-tree-id199 . -349) (undo-tree-id200 . -349) (undo-tree-id201 . -349) (undo-tree-id202 . -321) (undo-tree-id203 . -321) (undo-tree-id204 . -321) (undo-tree-id205 . -321) (undo-tree-id206 . -321) (undo-tree-id207 . -320) (undo-tree-id208 . -320) (undo-tree-id209 . -320) (undo-tree-id210 . -320) (undo-tree-id211 . -320) (undo-tree-id212 . -300) (undo-tree-id213 . -300) (undo-tree-id214 . -300) (undo-tree-id215 . -300) (undo-tree-id216 . -300) (undo-tree-id217 . -220) (undo-tree-id218 . -220) (undo-tree-id219 . -220) (undo-tree-id220 . -220) (undo-tree-id221 . -220) (undo-tree-id222 . -159) (undo-tree-id223 . -159) (undo-tree-id224 . -159) (undo-tree-id225 . -159) (undo-tree-id226 . -159) (undo-tree-id227 . -139) (undo-tree-id228 . -139) (undo-tree-id229 . -139) (undo-tree-id230 . -139) (undo-tree-id231 . -139) (undo-tree-id232 . -67) (undo-tree-id233 . -67) (undo-tree-id234 . -67) (undo-tree-id235 . -67) (undo-tree-id236 . -67) (undo-tree-id237 . -872)) ((229 . 1101)) (26634 53582 724546 0) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-variable-name-face fontified nil)) . -627) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (622 . 628)) nil (26634 53620 866472 0) 0 nil])
([nil nil ((228 . 233) 191) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 228) (undo-tree-id481 . -4) (undo-tree-id482 . -5) (undo-tree-id483 . -5) (undo-tree-id484 . -5) (undo-tree-id485 . -5) (undo-tree-id486 . -5) (undo-tree-id487 . -5) (undo-tree-id488 . -5) (undo-tree-id489 . -5) (undo-tree-id490 . -5) (undo-tree-id491 . -5) (undo-tree-id492 . -5) (undo-tree-id493 . -5) (undo-tree-id494 . -5) (undo-tree-id495 . -5) (undo-tree-id496 . -5) (undo-tree-id497 . -5) (undo-tree-id498 . -5) (undo-tree-id499 . -5) (undo-tree-id500 . -5) (undo-tree-id501 . -5) (undo-tree-id502 . -5) (undo-tree-id503 . -5) (undo-tree-id504 . -5) (undo-tree-id505 . -5) (undo-tree-id506 . -5) (undo-tree-id507 . -5) (undo-tree-id508 . -5) (undo-tree-id509 . -1) (undo-tree-id510 . -4) (undo-tree-id511 . -4) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -4) (undo-tree-id516 . -5)) (26634 53582 386791 0) 0 nil])
([nil nil ((#("        print(\"{:3d} {:15.8f} {:15.8f} {:15.2e} {:12d} {:12.3f}\".format(
            i, e, theoretical, error, iterations, time_ms))

" 0 8 (fontified t) 8 13 (face font-lock-builtin-face fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 64 (face font-lock-string-face fontified t) 64 65 (fontified t) 65 71 (face font-lock-builtin-face fontified t) 71 72 (face (rainbow-delimiters-depth-2-face) fontified t) 72 130 (fontified t) 130 131 (face (rainbow-delimiters-depth-2-face) fontified t) 131 132 (face (rainbow-delimiters-depth-1-face) fontified t) 132 134 (fontified t)) . 697) (undo-tree-id1035 . -133) (undo-tree-id1036 . -133) (undo-tree-id1037 . -133) (undo-tree-id1038 . -25) (undo-tree-id1039 . -25) (undo-tree-id1040 . -25) (undo-tree-id1041 . -25) (undo-tree-id1042 . -25) (undo-tree-id1043 . -25) (undo-tree-id1044 . -98) (undo-tree-id1045 . -98) (undo-tree-id1046 . -98) (undo-tree-id1047 . -98) (undo-tree-id1048 . -98) (undo-tree-id1049 . -133) (undo-tree-id1050 . -133) (undo-tree-id1051 . -133) (undo-tree-id1052 . -133) (undo-tree-id1053 . -133) (undo-tree-id1054 . -133) (undo-tree-id1055 . -134) (undo-tree-id1056 . -134) (undo-tree-id1057 . -134) (undo-tree-id1058 . -134) (undo-tree-id1059 . -134) (undo-tree-id1060 . -134) (undo-tree-id1061 . -134) (undo-tree-id1062 . -133) (undo-tree-id1063 . -133) (undo-tree-id1064 . -133) (undo-tree-id1065 . -133) (undo-tree-id1066 . -133) (undo-tree-id1067 . -73) (undo-tree-id1068 . -73) (undo-tree-id1069 . -73) (undo-tree-id1070 . -73) (undo-tree-id1071 . -73) (undo-tree-id1072 . -8) (undo-tree-id1073 . -8) (undo-tree-id1074 . -8) (undo-tree-id1075 . -8) (undo-tree-id1076 . -8) (undo-tree-id1077 . -8) (undo-tree-id1078 . -25) (undo-tree-id1079 . -25) (undo-tree-id1080 . -25) (undo-tree-id1081 . -25) (undo-tree-id1082 . -25) (undo-tree-id1083 . -25) (undo-tree-id1084 . -98) (undo-tree-id1085 . -98) (undo-tree-id1086 . -98) (undo-tree-id1087 . -98) (undo-tree-id1088 . -98) (undo-tree-id1089 . -133) (undo-tree-id1090 . -133) (undo-tree-id1091 . -133) (undo-tree-id1092 . -133) (undo-tree-id1093 . -133) (undo-tree-id1094 . -133) (undo-tree-id1095 . -133) (undo-tree-id1096 . -133) (undo-tree-id1097 . -133) (undo-tree-id1098 . -133) (undo-tree-id1099 . -133) (undo-tree-id1100 . -133) (undo-tree-id1101 . -133) (undo-tree-id1102 . -133) (undo-tree-id1103 . -133) (undo-tree-id1104 . -133) (undo-tree-id1105 . -133) (undo-tree-id1106 . -133) (undo-tree-id1107 . -73) (undo-tree-id1108 . -73) (undo-tree-id1109 . -73) (undo-tree-id1110 . -73) (undo-tree-id1111 . -73) (undo-tree-id1112 . -73) (undo-tree-id1113 . -73) (undo-tree-id1114 . -134)) nil (26634 53620 866469 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -234) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (230 . 235) (#("    " 0 4 (fontified nil)) . 229) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -4) (undo-tree-id25 . -4) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (233 . 234)) ((#("
" 0 1 (fontified nil)) . 233) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (229 . 233) (#("    j" 0 4 (fontified nil) 4 5 (fontified nil)) . 230) (undo-tree-id461 . -3) (undo-tree-id462 . -4) (undo-tree-id463 . -4) (undo-tree-id464 . -4) (undo-tree-id465 . -4) (undo-tree-id466 . -4) (undo-tree-id467 . -4) (undo-tree-id468 . -5) (undo-tree-id469 . -5) (undo-tree-id470 . -5) (undo-tree-id471 . -5) (undo-tree-id472 . -5) (undo-tree-id473 . -5) (undo-tree-id474 . -3) (undo-tree-id475 . -3) (undo-tree-id476 . -3) (undo-tree-id477 . -3) (undo-tree-id478 . -3) (undo-tree-id479 . -3) (undo-tree-id480 . -3) (234 . 235)) (26634 53582 210650 0) 0 nil])
([nil nil ((#("    print(\"-\" * 78)
" 0 4 (fontified t) 4 9 (face font-lock-builtin-face fontified t) 9 10 (face (rainbow-delimiters-depth-1-face) fontified t) 10 13 (face font-lock-string-face fontified t) 13 14 (fontified t) 14 15 (face font-lock-operator-face fontified t) 15 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 20 (fontified t)) . 697) (undo-tree-id972 . -19) (undo-tree-id973 . 20) (undo-tree-id974 . -18) (undo-tree-id975 . -18) (undo-tree-id976 . -18) (undo-tree-id977 . -18) (undo-tree-id978 . -18) (undo-tree-id979 . -18) (undo-tree-id980 . -20) (undo-tree-id981 . -20) (undo-tree-id982 . -20) (undo-tree-id983 . -20) (undo-tree-id984 . -20) (undo-tree-id985 . -20) (undo-tree-id986 . -20) (undo-tree-id987 . -20) (undo-tree-id988 . -20) (undo-tree-id989 . -20) (undo-tree-id990 . -20) (undo-tree-id991 . -20) (undo-tree-id992 . -18) (undo-tree-id993 . -18) (undo-tree-id994 . -18) (undo-tree-id995 . -18) (undo-tree-id996 . -18) (undo-tree-id997 . -18) (undo-tree-id998 . -18) (undo-tree-id999 . -18) (undo-tree-id1000 . -18) (undo-tree-id1001 . -18) (undo-tree-id1002 . -18) (undo-tree-id1003 . -20) (undo-tree-id1004 . -20) (undo-tree-id1005 . -20) (undo-tree-id1006 . -20) (undo-tree-id1007 . -20) (undo-tree-id1008 . -20) (undo-tree-id1009 . -20) (undo-tree-id1010 . -20) (undo-tree-id1011 . -20) (undo-tree-id1012 . -20) (undo-tree-id1013 . -20) (undo-tree-id1014 . -20) (undo-tree-id1015 . -20) (undo-tree-id1016 . -20) (undo-tree-id1017 . -20) (undo-tree-id1018 . -20) (undo-tree-id1019 . -20) (undo-tree-id1020 . -20) (undo-tree-id1021 . -20) (undo-tree-id1022 . -20) (undo-tree-id1023 . -20) (undo-tree-id1024 . -20) (undo-tree-id1025 . -20) (undo-tree-id1026 . -4) (undo-tree-id1027 . -4) (undo-tree-id1028 . -4) (undo-tree-id1029 . -4) (undo-tree-id1030 . -4) (undo-tree-id1031 . -4) (undo-tree-id1032 . -4) (undo-tree-id1033 . -4) (undo-tree-id1034 . -20)) nil (26634 53620 866435 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -230) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) 234) ((230 . 234)) (26634 53582 210473 0) 0 nil])
([nil nil ((#("        error = abs(e - theoretical)
" 0 8 (fontified t) 8 13 (face font-lock-variable-name-face fontified t) 13 14 (fontified t) 14 15 (face font-lock-operator-face fontified t) 15 16 (fontified t) 16 19 (face font-lock-builtin-face fontified t) 19 20 (face (rainbow-delimiters-depth-1-face) fontified t) 20 22 (fontified t) 22 23 (face font-lock-operator-face fontified t) 23 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 37 (fontified t)) . 659) (undo-tree-id921 . -36) (undo-tree-id922 . -25) (undo-tree-id923 . -25) (undo-tree-id924 . -25) (undo-tree-id925 . -25) (undo-tree-id926 . -25) (undo-tree-id927 . -37) (undo-tree-id928 . -37) (undo-tree-id929 . -37) (undo-tree-id930 . -37) (undo-tree-id931 . -37) (undo-tree-id932 . -37) (undo-tree-id933 . -37) (undo-tree-id934 . -37) (undo-tree-id935 . -37) (undo-tree-id936 . -37) (undo-tree-id937 . -37) (undo-tree-id938 . -25) (undo-tree-id939 . -25) (undo-tree-id940 . -25) (undo-tree-id941 . -25) (undo-tree-id942 . -25) (undo-tree-id943 . -25) (undo-tree-id944 . -25) (undo-tree-id945 . -25) (undo-tree-id946 . -25) (undo-tree-id947 . -25) (undo-tree-id948 . -25) (undo-tree-id949 . -25) (undo-tree-id950 . -25) (undo-tree-id951 . -25) (undo-tree-id952 . -25) (undo-tree-id953 . -25) (undo-tree-id954 . -37) (undo-tree-id955 . -37) (undo-tree-id956 . -37) (undo-tree-id957 . -37) (undo-tree-id958 . -37) (undo-tree-id959 . -37) (undo-tree-id960 . -37) (undo-tree-id961 . -37) (undo-tree-id962 . -37) (undo-tree-id963 . -37) (undo-tree-id964 . -37) (undo-tree-id965 . -37) (undo-tree-id966 . -37) (undo-tree-id967 . -37) (undo-tree-id968 . -37) (undo-tree-id969 . -37) (undo-tree-id970 . -37) (undo-tree-id971 . -37)) nil (26634 53620 866417 0) 0 nil])
nil
([nil nil ((#("        # Time the calculation
        timer = timeit.Timer(lambda: harmonic_oscillator(nodes=i))
        time_ms = timer.timeit(number=10) * 100  # Average time in ms

" 0 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 31 (face font-lock-comment-face fontified t) 31 39 (fontified t) 39 44 (face font-lock-variable-name-face fontified t) 44 45 (fontified t) 45 46 (face font-lock-operator-face fontified t) 46 59 (fontified t) 59 60 (face (rainbow-delimiters-depth-1-face) fontified t) 60 66 (face font-lock-keyword-face fontified t) 66 87 (fontified t) 87 88 (face (rainbow-delimiters-depth-2-face) fontified t) 88 93 (fontified t) 93 94 (face font-lock-operator-face fontified t) 94 95 (fontified t) 95 96 (face (rainbow-delimiters-depth-2-face) fontified t) 96 97 (face (rainbow-delimiters-depth-1-face) fontified t) 97 106 (fontified t) 106 113 (face font-lock-variable-name-face fontified t) 113 114 (fontified t) 114 115 (face font-lock-operator-face fontified t) 115 128 (fontified t) 128 129 (face (rainbow-delimiters-depth-1-face) fontified t) 129 135 (fontified t) 135 136 (face font-lock-operator-face fontified t) 136 138 (fontified t) 138 139 (face (rainbow-delimiters-depth-1-face) fontified t) 139 140 (fontified t) 140 141 (face font-lock-operator-face fontified t) 141 147 (fontified t) 147 149 (face font-lock-comment-delimiter-face fontified t) 149 168 (face font-lock-comment-face fontified t) 168 169 (fontified t)) . 400) (undo-tree-id838 . -168) (undo-tree-id839 . -168) (undo-tree-id840 . -168) (undo-tree-id841 . -169) (undo-tree-id842 . -169) (undo-tree-id843 . -169) (undo-tree-id844 . -169) (undo-tree-id845 . -169) (undo-tree-id846 . -168) (undo-tree-id847 . -168) (undo-tree-id848 . -168) (undo-tree-id849 . -168) (undo-tree-id850 . -168) (undo-tree-id851 . -98) (undo-tree-id852 . -98) (undo-tree-id853 . -98) (undo-tree-id854 . -98) (undo-tree-id855 . -98) (undo-tree-id856 . -31) (undo-tree-id857 . -31) (undo-tree-id858 . -31) (undo-tree-id859 . -31) (undo-tree-id860 . -31) (undo-tree-id861 . -31) (undo-tree-id862 . -31) (undo-tree-id863 . -31) (undo-tree-id864 . -31) (undo-tree-id865 . -31) (undo-tree-id866 . -98) (undo-tree-id867 . -98) (undo-tree-id868 . -98) (undo-tree-id869 . -98) (undo-tree-id870 . -98) (undo-tree-id871 . -168) (undo-tree-id872 . -168) (undo-tree-id873 . -168) (undo-tree-id874 . -168) (undo-tree-id875 . -168) (undo-tree-id876 . -169) (undo-tree-id877 . -169) (undo-tree-id878 . -169) (undo-tree-id879 . -169) (undo-tree-id880 . -169) (undo-tree-id881 . -169) (undo-tree-id882 . -169) (undo-tree-id883 . -169) (undo-tree-id884 . -169) (undo-tree-id885 . -169) (undo-tree-id886 . -168) (undo-tree-id887 . -168) (undo-tree-id888 . -168) (undo-tree-id889 . -168) (undo-tree-id890 . -168) (undo-tree-id891 . -168) (undo-tree-id892 . -168) (undo-tree-id893 . -168) (undo-tree-id894 . -168) (undo-tree-id895 . -168) (undo-tree-id896 . -168) (undo-tree-id897 . -168) (undo-tree-id898 . -168) (undo-tree-id899 . -168) (undo-tree-id900 . -168) (undo-tree-id901 . -168) (undo-tree-id902 . -168) (undo-tree-id903 . -168) (undo-tree-id904 . -168) (undo-tree-id905 . -168) (undo-tree-id906 . -168) (undo-tree-id907 . -168) (undo-tree-id908 . -98) (undo-tree-id909 . -98) (undo-tree-id910 . -98) (undo-tree-id911 . -98) (undo-tree-id912 . -98) (undo-tree-id913 . -98) (undo-tree-id914 . -98) (undo-tree-id915 . -31) (undo-tree-id916 . -31) (undo-tree-id917 . -31) (undo-tree-id918 . -31) (undo-tree-id919 . -31) (undo-tree-id920 . -169)) nil (26634 53620 866402 0) 0 nil])
([nil nil ((#("    \"\"\"Generate formatted table of harmonic oscillator energies\"\"\"
" 0 4 (fontified t) 4 6 (face font-lock-doc-face fontified t) 6 7 (face font-lock-doc-face syntax-table (15) fontified t) 7 63 (face font-lock-doc-face fontified t) 63 64 (face font-lock-doc-face syntax-table (15) fontified t) 64 66 (face font-lock-doc-face fontified t) 66 67 (fontified t)) . 229) (undo-tree-id688 . -66) (undo-tree-id689 . -67) (undo-tree-id690 . -67) (undo-tree-id691 . -67) (undo-tree-id692 . -67) (undo-tree-id693 . -67) (undo-tree-id694 . -67) (undo-tree-id695 . -67) (undo-tree-id696 . -67) (undo-tree-id697 . -67) (undo-tree-id698 . -67) (undo-tree-id699 . -67) (undo-tree-id700 . -67) (undo-tree-id701 . -67) (undo-tree-id702 . -67) (undo-tree-id703 . -67) (undo-tree-id704 . -67) (undo-tree-id705 . -67) (undo-tree-id706 . -67) (undo-tree-id707 . -67) (undo-tree-id708 . -67) (undo-tree-id709 . -67) (undo-tree-id710 . -67) (undo-tree-id711 . -67) (undo-tree-id712 . -67) (undo-tree-id713 . -67) (undo-tree-id714 . -67) (undo-tree-id715 . -67) (undo-tree-id716 . -67) (undo-tree-id717 . -67) (undo-tree-id718 . -67) (undo-tree-id719 . -67) (undo-tree-id720 . -67) (undo-tree-id721 . -67) (undo-tree-id722 . -67) (undo-tree-id723 . -67) (undo-tree-id724 . -4) (undo-tree-id725 . -4) (undo-tree-id726 . -4) (undo-tree-id727 . -4) (undo-tree-id728 . -66) (undo-tree-id729 . -4) (undo-tree-id730 . -4) (undo-tree-id731 . -4) (undo-tree-id732 . -4) (undo-tree-id733 . -4) (undo-tree-id734 . -66) (undo-tree-id735 . -4) (undo-tree-id736 . -4) (undo-tree-id737 . -4) (undo-tree-id738 . -4) (undo-tree-id739 . -4) (undo-tree-id740 . -66) (undo-tree-id741 . -4) (undo-tree-id742 . -67) (undo-tree-id743 . -67) (undo-tree-id744 . -67) (undo-tree-id745 . -67) (undo-tree-id746 . -67) (undo-tree-id747 . -67) (undo-tree-id748 . -67) (undo-tree-id749 . -67) (undo-tree-id750 . -67) (undo-tree-id751 . -67) (undo-tree-id752 . -67) (undo-tree-id753 . -67) (undo-tree-id754 . -67) (undo-tree-id755 . -67) (undo-tree-id756 . -67) (undo-tree-id757 . -67) (undo-tree-id758 . -67) (undo-tree-id759 . -67) (undo-tree-id760 . -67) (undo-tree-id761 . -67) (undo-tree-id762 . -67) (undo-tree-id763 . -67) (undo-tree-id764 . -67) (undo-tree-id765 . -67) (undo-tree-id766 . -67) (undo-tree-id767 . -67) (undo-tree-id768 . -67) (undo-tree-id769 . -67) (undo-tree-id770 . -67) (undo-tree-id771 . -67) (undo-tree-id772 . -67) (undo-tree-id773 . -67) (undo-tree-id774 . -67) (undo-tree-id775 . -67) (undo-tree-id776 . -67) (undo-tree-id777 . -67) (undo-tree-id778 . -67) (undo-tree-id779 . -67) (undo-tree-id780 . -67) (undo-tree-id781 . -67) (undo-tree-id782 . -67) (undo-tree-id783 . -67) (undo-tree-id784 . -67) (undo-tree-id785 . -67) (undo-tree-id786 . -67) (undo-tree-id787 . -67) (undo-tree-id788 . -67) (undo-tree-id789 . -67) (undo-tree-id790 . -67) (undo-tree-id791 . -67) (undo-tree-id792 . -67) (undo-tree-id793 . -67) (undo-tree-id794 . -67) (undo-tree-id795 . -67) (undo-tree-id796 . -67) (undo-tree-id797 . -67) (undo-tree-id798 . -67) (undo-tree-id799 . -67) (undo-tree-id800 . -67) (undo-tree-id801 . -67) (undo-tree-id802 . -67) (undo-tree-id803 . -67) (undo-tree-id804 . -67) (undo-tree-id805 . -67) (undo-tree-id806 . -67) (undo-tree-id807 . -67) (undo-tree-id808 . -67) (undo-tree-id809 . -67) (undo-tree-id810 . -67) (undo-tree-id811 . -67) (undo-tree-id812 . -67) (undo-tree-id813 . -67) (undo-tree-id814 . -67) (undo-tree-id815 . -67) (undo-tree-id816 . -67) (undo-tree-id817 . -67) (undo-tree-id818 . -67) (undo-tree-id819 . -67) (undo-tree-id820 . -67) (undo-tree-id821 . -67) (undo-tree-id822 . -67) (undo-tree-id823 . -67) (undo-tree-id824 . -67) (undo-tree-id825 . -67) (undo-tree-id826 . -67) (undo-tree-id827 . -67) (undo-tree-id828 . -67) (undo-tree-id829 . -67) (undo-tree-id830 . -67) (undo-tree-id831 . -67) (undo-tree-id832 . -67) (undo-tree-id833 . -67) (undo-tree-id834 . -67) (undo-tree-id835 . -67) (undo-tree-id836 . -67) (undo-tree-id837 . -67)) nil (26634 53620 866379 0) 0 nil])
([nil nil ((#("        # Theoretical energy E_n = (n + 0.5)
" 0 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 45 (face font-lock-comment-face fontified t)) . 257) (undo-tree-id602 . -44) (undo-tree-id603 . -45) (undo-tree-id604 . -45) (undo-tree-id605 . -45) (undo-tree-id606 . -45) (undo-tree-id607 . -45) (undo-tree-id608 . -45) (undo-tree-id609 . -45) (undo-tree-id610 . -45) (undo-tree-id611 . -45) (undo-tree-id612 . -45) (undo-tree-id613 . -45) (undo-tree-id614 . -45) (undo-tree-id615 . -45) (undo-tree-id616 . -45) (undo-tree-id617 . -45) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -2) (undo-tree-id625 . -2) (undo-tree-id626 . -2) (undo-tree-id627 . -2) (undo-tree-id628 . -2) (undo-tree-id629 . -2) (undo-tree-id630 . -3) (undo-tree-id631 . -3) (undo-tree-id632 . -3) (undo-tree-id633 . -3) (undo-tree-id634 . -3) (undo-tree-id635 . -3) (undo-tree-id636 . -4) (undo-tree-id637 . -4) (undo-tree-id638 . -4) (undo-tree-id639 . -4) (undo-tree-id640 . -4) (undo-tree-id641 . -4) (undo-tree-id642 . -5) (undo-tree-id643 . -5) (undo-tree-id644 . -5) (undo-tree-id645 . -5) (undo-tree-id646 . -5) (undo-tree-id647 . -5) (undo-tree-id648 . -6) (undo-tree-id649 . -6) (undo-tree-id650 . -6) (undo-tree-id651 . -6) (undo-tree-id652 . -6) (undo-tree-id653 . -6) (undo-tree-id654 . -7) (undo-tree-id655 . -7) (undo-tree-id656 . -7) (undo-tree-id657 . -7) (undo-tree-id658 . -7) (undo-tree-id659 . -7) (undo-tree-id660 . -8) (undo-tree-id661 . -8) (undo-tree-id662 . -8) (undo-tree-id663 . -8) (undo-tree-id664 . -8) (undo-tree-id665 . -8) (undo-tree-id666 . -9) (undo-tree-id667 . -9) (undo-tree-id668 . -9) (undo-tree-id669 . -9) (undo-tree-id670 . -9) (undo-tree-id671 . -9) (undo-tree-id672 . -10) (undo-tree-id673 . -10) (undo-tree-id674 . -10) (undo-tree-id675 . -10) (undo-tree-id676 . -10) (undo-tree-id677 . -10) (undo-tree-id678 . -10) (undo-tree-id679 . -10) (undo-tree-id680 . -10) (undo-tree-id681 . -10) (undo-tree-id682 . -10) (undo-tree-id683 . -10) (undo-tree-id684 . -10) (undo-tree-id685 . -10) (undo-tree-id686 . -10) (undo-tree-id687 . -45) 267) nil (26634 53620 866339 0) 0 nil])
([nil nil ((#("        theoretical = i + 0.5
" 0 8 (fontified t) 8 19 (face font-lock-variable-name-face fontified t) 19 20 (fontified t) 20 21 (face font-lock-operator-face fontified t) 21 24 (fontified t) 24 25 (face font-lock-operator-face fontified t) 25 29 (fontified t) 29 30 (fontified t)) . 257) (undo-tree-id567 . -29) (undo-tree-id568 . -30) (undo-tree-id569 . -30) (undo-tree-id570 . -30) (undo-tree-id571 . -30) (undo-tree-id572 . -30) (undo-tree-id573 . -30) (undo-tree-id574 . -30) (undo-tree-id575 . -30) (undo-tree-id576 . -30) (undo-tree-id577 . -30) (undo-tree-id578 . -30) (undo-tree-id579 . -30) (undo-tree-id580 . -30) (undo-tree-id581 . -30) (undo-tree-id582 . -30) (undo-tree-id583 . -30) (undo-tree-id584 . -29) (undo-tree-id585 . -10) (undo-tree-id586 . -10) (undo-tree-id587 . -10) (undo-tree-id588 . -10) (undo-tree-id589 . -10) (undo-tree-id590 . -10) (undo-tree-id591 . -10) (undo-tree-id592 . -10) (undo-tree-id593 . -10) (undo-tree-id594 . -10) (undo-tree-id595 . -10) (undo-tree-id596 . -10) (undo-tree-id597 . -10) (undo-tree-id598 . -10) (undo-tree-id599 . -10) (undo-tree-id600 . -10) (undo-tree-id601 . -30) 267) nil (26634 53620 866315 0) 0 nil])
([nil nil ((347 . 356) 290) nil (26634 53620 866305 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -356) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (356 . 357)) nil (26634 53620 866305 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -348) (undo-tree-id539 . -8) (undo-tree-id540 . -8) (undo-tree-id541 . -8) (undo-tree-id542 . -8) (undo-tree-id543 . -8) (undo-tree-id544 . -8) (undo-tree-id545 . -8) (undo-tree-id546 . -8) (undo-tree-id547 . -8) (undo-tree-id548 . -8) (undo-tree-id549 . -8) (undo-tree-id550 . -8) (undo-tree-id551 . -8) (undo-tree-id552 . -8) (undo-tree-id553 . -8) (undo-tree-id554 . -8) (undo-tree-id555 . -8) (undo-tree-id556 . -8) (undo-tree-id557 . -8) (undo-tree-id558 . -8) (undo-tree-id559 . -8) 356) nil (26634 53620 866303 0) 0 nil])
([nil nil ((347 . 356) 290) nil (26634 53620 866296 0) 0 nil])
([nil nil ((349 . 357) (#("        " 0 8 (fontified nil)) . 348) (undo-tree-id524 . -8) (undo-tree-id525 . -8) (undo-tree-id526 . -8) (undo-tree-id527 . -8) (undo-tree-id528 . -8) (undo-tree-id529 . -8) (undo-tree-id530 . -8) (undo-tree-id531 . -8) (undo-tree-id532 . -8) (undo-tree-id533 . -8) (undo-tree-id534 . -8) (undo-tree-id535 . -8) (undo-tree-id536 . -8) (undo-tree-id537 . -8) (undo-tree-id538 . -8) (356 . 357)) nil (26634 53623 29276 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -357) (undo-tree-id1688 . -1) (357 . 358) 356) nil (26634 54331 675625 0) 0 nil] [nil nil ((#("j" 0 1 (fontified nil)) . -357) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (357 . 358) 356) ((#("j" 0 1 (fontified nil)) . 357) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (357 . 358)) (26634 53622 929434 0) 0 nil] [nil nil ((#("j" 0 1 (fontified nil)) . -368) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (357 . 369)) ((#("psi_full = j" 0 8 (face font-lock-variable-name-face fontified nil) 8 9 (fontified nil) 9 10 (face font-lock-operator-face fontified nil) 10 11 (fontified nil) 11 12 (fontified nil)) . 357) (undo-tree-id1212 . -10) (undo-tree-id1213 . -12) (undo-tree-id1214 . -12) (undo-tree-id1215 . -12) (undo-tree-id1216 . -12) (undo-tree-id1217 . -12) (undo-tree-id1218 . -12) (undo-tree-id1219 . -10) (368 . 369)) (26634 53620 866288 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -349) (undo-tree-id1685 . -7) (undo-tree-id1686 . -8) (undo-tree-id1687 . -8) 357) nil (26634 54331 675625 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -349) (undo-tree-id1220 . -8) (undo-tree-id1221 . -8) (undo-tree-id1222 . -8) (undo-tree-id1223 . -8) (undo-tree-id1224 . -8) (undo-tree-id1225 . -8) (undo-tree-id1226 . -8) (undo-tree-id1227 . -7) (undo-tree-id1228 . -7) (undo-tree-id1229 . -7) (undo-tree-id1230 . -7) (undo-tree-id1231 . -7) (undo-tree-id1232 . -7) (undo-tree-id1233 . -7) (undo-tree-id1234 . -7) (undo-tree-id1235 . -7) (undo-tree-id1236 . -7) (undo-tree-id1237 . -7) (undo-tree-id1238 . -8) (undo-tree-id1239 . -8) (undo-tree-id1240 . -8) (undo-tree-id1241 . -8) (undo-tree-id1242 . -8) (undo-tree-id1243 . -8) (undo-tree-id1244 . -8) (undo-tree-id1245 . -8) (undo-tree-id1246 . -8) (undo-tree-id1247 . -8) (undo-tree-id1248 . -8) (undo-tree-id1249 . -8) (undo-tree-id1250 . -8) (undo-tree-id1251 . -8) (undo-tree-id1252 . -8) 357) ((349 . 357)) (26634 53622 929385 0) 0 nil])
nil
([nil nil ((228 . 233) 191) nil (26634 54331 675624 0) 0 nil])
nil
([nil nil ((#("    " 0 4 (fontified t)) . -229) (undo-tree-id1684 . -4) 233) nil (26634 54331 675623 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -228) (undo-tree-id1682 . -1) (228 . 229) (#("
" 0 1 (fontified t)) . -228) (undo-tree-id1683 . -1) 229) nil (26634 54331 675623 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -224) (undo-tree-id1679 . -1) (224 . 225) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -224) (undo-tree-id1680 . -1) (#("5" 0 1 (fontified t)) . -225) (undo-tree-id1681 . -1) 226) nil (26634 54331 675621 0) 0 nil])
([nil nil ((#("6" 0 1 (fontified t)) . -429) (undo-tree-id1678 . -1) 430) nil (26634 54331 675620 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -430) (undo-tree-id1677 . -1) (429 . 431)) nil (26634 54331 675620 0) 0 nil])
([nil nil ((345 . 354) 322) nil (26634 54331 675619 0) 0 nil])
([nil nil ((347 . 355) (#("        " 0 8 (fontified nil)) . 346) (undo-tree-id1676 . -8) (354 . 355)) nil (26634 54331 675619 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -366) (undo-tree-id1675 . -1) (355 . 367)) nil (26634 54331 675619 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 597 . 598) (nil fontified nil 346 . 598) (346 . 598)) nil (26634 54331 675618 0) 0 nil])
([nil nil ((346 . 354) (#("    " 0 4 (fontified t)) . 346)) nil (26634 54331 675617 0) 0 nil])
([nil nil ((402 . 410) (#("    " 0 4 (fontified t)) . 402)) nil (26634 54331 675617 0) 0 nil])
([nil nil ((437 . 441) 429) nil (26634 54331 675616 0) 0 nil])
([nil nil ((476 . 480) 468) nil (26634 54331 675616 0) 0 nil])
([nil nil ((520 . 528) (#("    " 0 4 (fontified t)) . 520)) nil (26634 54331 675616 0) 0 nil])
([nil nil ((542 . 546) 534) nil (26634 54331 675615 0) 0 nil])
([nil nil ((581 . 585) 573) nil (26634 54331 675615 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -354) (undo-tree-id1674 . -1) (345 . 355) 288) nil (26634 54331 675614 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -346) (undo-tree-id1673 . -8) 354) nil (26634 54331 675613 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -264) (undo-tree-id1672 . -1) (255 . 265)) nil (26634 54331 675613 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -256) (undo-tree-id1671 . -8) 264) nil (26634 54331 675612 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -355) (undo-tree-id1670 . -1) (346 . 356) 289) nil (26634 54331 675611 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -347) (undo-tree-id1669 . -8) 355) nil (26634 54331 675610 0) 0 nil])
([nil nil ((256 . 264)) nil (26634 54331 675610 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -365) (undo-tree-id1668 . -1) (356 . 366)) nil (26634 54331 675610 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -357) (undo-tree-id1667 . -8) 365) nil (26634 54331 675609 0) 0 nil])
([nil nil ((255 . 264)) nil (26634 54331 675609 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -271) (undo-tree-id1666 . -1) (264 . 272)) nil (26634 54331 675609 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -274) (undo-tree-id1665 . -1) (271 . 275)) nil (26634 54331 675608 0) 0 nil])
([nil nil ((372 . 381)) nil (26634 54331 675608 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -378) (undo-tree-id1662 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -379) (undo-tree-id1663 . -1) (#(" " 0 1 (fontified t)) . -380) (undo-tree-id1664 . -1) 381) nil (26634 54331 675607 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -383) (undo-tree-id1661 . -1) (378 . 384)) nil (26634 54331 675606 0) 0 nil])
([nil nil ((385 . 394)) nil (26634 54331 675605 0) 0 nil])
([nil nil ((394 . 414)) nil (26634 54331 675605 0) 0 nil])
([nil nil ((415 . 420) (414 . 416) (#("(" 0 1 (fontified nil)) . -414) (414 . 415)) nil (26634 54331 675605 0) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -419) (undo-tree-id1660 . -1) 420) nil (26634 54331 675604 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -438) (undo-tree-id1659 . -1) (419 . 439)) nil (26634 54331 675604 0) 0 nil])
([nil nil ((383 . 390)) nil (26634 54331 675604 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -389) (undo-tree-id1658 . -1) 390) nil (26634 54331 675603 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -392) (undo-tree-id1657 . -1) (389 . 393)) nil (26634 54331 675603 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -394) (undo-tree-id1656 . -1) (392 . 395)) nil (26634 54331 675602 0) 0 nil])
([nil nil ((274 . 283) 273) nil (26634 54331 675602 0) 0 nil])
([nil nil ((283 . 287)) nil (26634 54331 675601 0) 0 nil])
([nil nil ((287 . 293)) nil (26634 54331 675601 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -291) (undo-tree-id1654 . -1) (#("0" 0 1 (fontified t)) . -292) (undo-tree-id1655 . -1) 293) nil (26634 54331 675601 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -294) (undo-tree-id1653 . -1) (291 . 295)) nil (26634 54331 675600 0) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -410) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (#("0" 0 1 (fontified t)) . -411) (undo-tree-id1650 . -1) (#("." 0 1 (fontified t)) . -412) (undo-tree-id1651 . -1) (#("0" 0 1 (fontified t)) . -413) (undo-tree-id1652 . -1) 414) nil (26634 54331 675599 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -414) (undo-tree-id1644 . -1) (410 . 415)) nil (26634 54331 675597 0) 0 nil])
([nil nil ((470 . 479) 417) nil (26634 54331 675597 0) 0 nil])
([nil nil ((499 . 500) (498 . 500) (#("(" 0 1 (fontified nil)) . -498) (479 . 499)) nil (26634 54331 675596 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -509) (undo-tree-id1643 . -1) (500 . 510)) nil (26634 54331 675596 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -519) (undo-tree-id1642 . -1) (510 . 520) 508) nil (26634 54331 675595 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -511) (undo-tree-id1641 . -8) 519) nil (26634 54331 675595 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 511) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . 1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1)) nil (26634 54331 675594 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 511) (undo-tree-id1635 . 1)) nil (26634 54331 675593 0) 0 nil])
([nil nil ((510 . 519) 471) nil (26634 54331 675592 0) 0 nil])
([nil nil ((512 . 520) (#("        " 0 8 (fontified nil)) . 511) (undo-tree-id1634 . -8) (519 . 520)) nil (26634 54331 675592 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -534) (undo-tree-id1633 . -1) (529 . 535) (528 . 530) (#("[" 0 1 (fontified nil)) . -528) (520 . 529)) nil (26634 54331 675591 0) 0 nil])
([nil nil ((535 . 539)) nil (26634 54331 675591 0) 0 nil])
([nil nil ((539 . 543)) nil (26634 54331 675591 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -542) (undo-tree-id1632 . -1) 543) nil (26634 54331 675590 0) 0 nil])
([nil nil ((542 . 545)) nil (26634 54331 675590 0) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -542) (undo-tree-id1629 . -1) (#("a" 0 1 (fontified t)) . -543) (undo-tree-id1630 . -1) (#("l" 0 1 (fontified t)) . -544) (undo-tree-id1631 . -1) 545) nil (26634 54331 675589 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -546) (undo-tree-id1628 . -1) (542 . 547)) nil (26634 54331 675588 0) 0 nil])
([nil nil ((511 . 520)) nil (26634 54331 675588 0) 0 nil])
([nil nil ((520 . 526)) nil (26634 54331 675588 0) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-comment-face fontified t)) . -524) (undo-tree-id1626 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -525) (undo-tree-id1627 . -1) 526) nil (26634 54331 675587 0) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-comment-face fontified t)) . -523) (undo-tree-id1625 . -1) 524) nil (26634 54331 675587 0) 0 nil])
([nil nil ((523 . 532)) nil (26634 54331 675586 0) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-comment-face fontified t)) . -527) (undo-tree-id1620 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -528) (undo-tree-id1621 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -529) (undo-tree-id1622 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -530) (undo-tree-id1623 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -531) (undo-tree-id1624 . -1) 532) nil (26634 54331 675586 0) 0 nil])
([nil nil ((527 . 544)) nil (26634 54331 675584 0) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-comment-face fontified t)) . -543) (undo-tree-id1619 . -1) 544) nil (26634 54331 675584 0) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-comment-face fontified nil)) . -544) (undo-tree-id1618 . -1) (543 . 545)) nil (26634 54331 675583 0) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-comment-face fontified nil)) . -552) (undo-tree-id1617 . -1) (546 . 553) (545 . 547) (#("(" 0 1 (face font-lock-comment-face fontified nil)) . -545) (544 . 546)) nil (26634 54331 675582 0) 0 nil])
([nil nil ((416 . 425)) nil (26634 54331 675582 0) 0 nil])
([nil nil ((425 . 428)) nil (26634 54331 675582 0) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-comment-face fontified t)) . -427) (undo-tree-id1616 . -1) 428) nil (26634 54331 675581 0) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-comment-face fontified nil)) . -439) (undo-tree-id1615 . -1) (427 . 440)) nil (26634 54331 675581 0) 0 nil])
([nil nil ((#("        psi_full = 
" 0 8 (fontified t) 8 16 (face font-lock-variable-name-face fontified t) 16 17 (fontified t) 17 18 (face font-lock-operator-face fontified t) 18 19 (fontified t) 19 20 (fontified t)) . 894) (undo-tree-id1613 . -19) (undo-tree-id1614 . -18) 912) nil (26634 54331 675580 0) 0 nil])
([nil nil ((893 . 906) 893) nil (26634 54331 675580 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -902) (undo-tree-id1612 . -4) 906) nil (26634 54331 675579 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -898) (undo-tree-id1611 . -4) 902) nil (26634 54331 675579 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -894) (undo-tree-id1609 . -1) (894 . 895) (#("    " 0 4 (fontified t)) . -894) (undo-tree-id1610 . -4) 898) nil (26634 54331 675578 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 894) (undo-tree-id1607 . 1) (undo-tree-id1608 . 1)) nil (26634 54331 675577 0) 0 nil])
([nil nil ((#("


" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 894) (undo-tree-id1599 . -2) (undo-tree-id1600 . -2) (undo-tree-id1601 . -2) (undo-tree-id1602 . 3) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -2) 896) nil (26634 54331 675576 0) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -606) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (#("h" 0 1 (fontified t)) . -607) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (#("a" 0 1 (fontified t)) . -608) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (#("l" 0 1 (fontified t)) . -609) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (#("f" 0 1 (fontified t)) . -610) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) 611) nil (26634 54331 675569 0) 0 nil])
([nil nil ((#("nodes" 0 5 (fontified t)) . 675) (undo-tree-id2099 . -4) (undo-tree-id2100 . -5) (undo-tree-id2101 . -2) (undo-tree-id2102 . -2) (undo-tree-id2103 . -2) (undo-tree-id2104 . -2) (undo-tree-id2105 . -2) (undo-tree-id2106 . -2) (undo-tree-id2107 . -2) (undo-tree-id2108 . -2) (undo-tree-id2109 . -2) (undo-tree-id2110 . -2) (undo-tree-id2111 . -2) (undo-tree-id2112 . -2) (undo-tree-id2113 . -2) (undo-tree-id2114 . -2) (undo-tree-id2115 . -2) (undo-tree-id2116 . -5) (undo-tree-id2117 . -5) 677 (t 26634 54331 679619 264000)) nil (26634 54362 197790 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -681) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (675 . 682)) nil (26634 54362 197785 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -675) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (#("t" 0 1 (fontified t)) . -676) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (#("a" 0 1 (fontified t)) . -677) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (#("t" 0 1 (fontified t)) . -678) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (#("e" 0 1 (fontified t)) . -679) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (#("s" 0 1 (fontified t)) . -680) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) 681) nil (26634 54362 197779 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -676) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (675 . 677)) nil (26634 54362 197670 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1118 . 1119) (nil fontified nil 884 . 1119) (884 . 1119) (t 26634 54362 201799 362000)) nil (26634 54426 811011 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -896) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (883 . 897) 844) nil (26634 54426 811010 0) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -884) (undo-tree-id2164 . -12) (undo-tree-id2165 . -12) (undo-tree-id2166 . -12) (undo-tree-id2167 . -12) (undo-tree-id2168 . -12) (undo-tree-id2169 . -12) (undo-tree-id2170 . -12) (undo-tree-id2171 . -12) (undo-tree-id2172 . -12) (undo-tree-id2173 . -12) (undo-tree-id2174 . -12) (undo-tree-id2175 . -12) (undo-tree-id2176 . -12) (undo-tree-id2177 . -12) (undo-tree-id2178 . -12) (undo-tree-id2179 . -12) 896) nil (26634 54426 811008 0) 0 nil])
([nil nil ((980 . 988) (#("    " 0 4 (fontified t)) . 980) (undo-tree-id2159 . -4) (undo-tree-id2160 . -4) (undo-tree-id2161 . -4) (undo-tree-id2162 . -4) (undo-tree-id2163 . -4)) nil (26634 54426 811003 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -984) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (984 . 985) (#("    " 0 4 (fontified t)) . -984) (undo-tree-id2125 . -4) (undo-tree-id2126 . -4) (undo-tree-id2127 . -4) (undo-tree-id2128 . -4) (undo-tree-id2129 . -4) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -2) (undo-tree-id2137 . -2) (undo-tree-id2138 . -2) (undo-tree-id2139 . -2) (undo-tree-id2140 . -2) (undo-tree-id2141 . -2) (undo-tree-id2142 . -3) (undo-tree-id2143 . -3) (undo-tree-id2144 . -3) (undo-tree-id2145 . -3) (undo-tree-id2146 . -3) (undo-tree-id2147 . -3) (undo-tree-id2148 . -4) (undo-tree-id2149 . -4) (undo-tree-id2150 . -4) (undo-tree-id2151 . -4) (undo-tree-id2152 . -4) (undo-tree-id2153 . -4) (undo-tree-id2154 . -4) (undo-tree-id2155 . -4) (undo-tree-id2156 . -4) (undo-tree-id2157 . -4) (undo-tree-id2158 . -4) 988) nil (26634 54426 811000 0) 0 nil])
([nil nil ((#("import timeit
" 0 6 (face font-lock-keyword-face fontified t) 6 14 (fontified t)) . 1) (undo-tree-id2194 . -13) (undo-tree-id2195 . -8) (undo-tree-id2196 . -8) (undo-tree-id2197 . -8) (undo-tree-id2198 . -8) (undo-tree-id2199 . -8) (undo-tree-id2200 . -8) (undo-tree-id2201 . -8) (undo-tree-id2202 . -8) (undo-tree-id2203 . -8) (undo-tree-id2204 . -8) (undo-tree-id2205 . -8) (undo-tree-id2206 . -8) (undo-tree-id2207 . -8) (undo-tree-id2208 . -8) (undo-tree-id2209 . -14) 9 (t 26634 54426 815951 560000)) nil (26634 54456 624081 0) 0 nil])
([nil nil ((1 . 2) 9) nil (26634 54456 624076 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -19) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (1 . 20)) nil (26634 54456 624073 0) 0 nil])
([nil nil ((#("_half" 0 5 (fontified t)) . 772) (undo-tree-id2240 . -4) (undo-tree-id2241 . -4) (undo-tree-id2242 . -4) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -2) (undo-tree-id2250 . -2) (undo-tree-id2251 . -2) (undo-tree-id2252 . -2) (undo-tree-id2253 . -2) (undo-tree-id2254 . -2) (undo-tree-id2255 . -3) (undo-tree-id2256 . -3) (undo-tree-id2257 . -3) (undo-tree-id2258 . -3) (undo-tree-id2259 . -3) (undo-tree-id2260 . -3) (undo-tree-id2261 . -4) (undo-tree-id2262 . -4) (undo-tree-id2263 . -4) (undo-tree-id2264 . -4) (undo-tree-id2265 . -4) (undo-tree-id2266 . -4) (undo-tree-id2267 . -4) (undo-tree-id2268 . -4) (undo-tree-id2269 . -5) 776 (t 26634 54456 628166 377000)) nil (26634 54487 182200 0) 0 nil])
([nil nil ((#("_half" 0 5 (fontified t)) . 873) (undo-tree-id2210 . -4) (undo-tree-id2211 . -4) (undo-tree-id2212 . -4) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -2) (undo-tree-id2220 . -2) (undo-tree-id2221 . -2) (undo-tree-id2222 . -2) (undo-tree-id2223 . -2) (undo-tree-id2224 . -2) (undo-tree-id2225 . -3) (undo-tree-id2226 . -3) (undo-tree-id2227 . -3) (undo-tree-id2228 . -3) (undo-tree-id2229 . -3) (undo-tree-id2230 . -3) (undo-tree-id2231 . -4) (undo-tree-id2232 . -4) (undo-tree-id2233 . -4) (undo-tree-id2234 . -4) (undo-tree-id2235 . -4) (undo-tree-id2236 . -4) (undo-tree-id2237 . -4) (undo-tree-id2238 . -4) (undo-tree-id2239 . -5) 877) nil (26634 54487 182190 0) 0 nil])
([nil nil ((19 . 20) (t 26634 54487 186415 893000) 10) nil (26634 54500 660479 0) 0 nil])
([nil nil ((20 . 21)) nil (26634 54500 660479 0) 0 nil])
([nil nil ((21 . 32)) nil (26634 54500 660479 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -27) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (#("u" 0 1 (fontified t)) . -28) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (#("m" 0 1 (fontified t)) . -29) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (#("p" 0 1 (fontified t)) . -30) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (#("y" 0 1 (fontified t)) . -31) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) 32) nil (26634 54500 660476 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -44) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (27 . 45)) nil (26634 54500 660408 0) 0 nil])
([nil nil ((#("        # Plot the wavefunction
        plt.plot(x_full, psi_full, label=f\"n={i}, E={e:.3f}\")

    plt.title(\"Harmonic Oscillator Wavefunctions\")
    plt.xlabel(\"x\")
    plt.ylabel(\"ψ(x)\")
    plt.legend()
    plt.grid()
    plt.show()


" 0 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 32 (face font-lock-comment-face fontified t) 32 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-1-face) fontified t) 49 72 (fontified t) 72 73 (face font-lock-operator-face fontified t) 73 74 (fontified t) 74 77 (face font-lock-string-face fontified t) 77 80 (face nil fontified t) 80 84 (face font-lock-string-face fontified t) 84 91 (face nil fontified t) 91 92 (face font-lock-string-face fontified t) 92 93 (face (rainbow-delimiters-depth-1-face) fontified t) 93 95 (fontified t) 95 99 (fontified t) 99 108 (fontified t) 108 109 (face (rainbow-delimiters-depth-1-face) fontified t) 109 144 (face font-lock-string-face fontified t) 144 145 (face (rainbow-delimiters-depth-1-face) fontified t) 145 146 (fontified t) 146 160 (fontified t) 160 161 (face (rainbow-delimiters-depth-1-face) fontified t) 161 164 (face font-lock-string-face fontified t) 164 165 (face (rainbow-delimiters-depth-1-face) fontified t) 165 180 (fontified t) 180 181 (face (rainbow-delimiters-depth-1-face) fontified t) 181 187 (face font-lock-string-face fontified t) 187 188 (face (rainbow-delimiters-depth-1-face) fontified t) 188 203 (fontified t) 203 204 (face (rainbow-delimiters-depth-1-face) fontified t) 204 205 (face (rainbow-delimiters-depth-1-face) fontified t) 205 218 (fontified t) 218 219 (face (rainbow-delimiters-depth-1-face) fontified t) 219 220 (face (rainbow-delimiters-depth-1-face) fontified t) 220 233 (fontified t) 233 234 (face (rainbow-delimiters-depth-1-face) fontified t) 234 235 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t) 235 236 (fontified t) 236 237 (fontified t) 237 238 (fontified t)) . 905) (undo-tree-id2496 . -237) (undo-tree-id2497 . -237) (undo-tree-id2498 . -237) (undo-tree-id2499 . -236) (undo-tree-id2500 . -236) (undo-tree-id2501 . -236) (undo-tree-id2502 . -204) (undo-tree-id2503 . -204) (undo-tree-id2504 . -205) (undo-tree-id2505 . -219) (t 26634 54500 665119 484000)) nil (26634 54954 458676 0) 0 nil])
([nil nil ((256 . 261) 221) nil (26634 54954 458674 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -262) (undo-tree-id2494 . -1) (258 . 263) (#("    " 0 4 (fontified nil)) . 257) (undo-tree-id2495 . -4) (261 . 262)) nil (26634 54954 458673 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -258) (undo-tree-id2493 . -4) 262) nil (26634 54954 458672 0) 0 nil])
([nil nil ((#("        mesh = 500
        xmax = 10.0
 " 0 8 (fontified t) 8 12 (face font-lock-variable-name-face fontified t) 12 13 (fontified t) 13 14 (face font-lock-operator-face fontified t) 14 18 (fontified t) 18 19 (fontified t) 19 27 (fontified t) 27 31 (face font-lock-variable-name-face fontified t) 31 32 (fontified t) 32 33 (face font-lock-operator-face fontified t) 33 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t)) . 288) (undo-tree-id2488 . -39) (undo-tree-id2489 . -39) (undo-tree-id2490 . -39) (undo-tree-id2491 . -14) (undo-tree-id2492 . -39) 327) nil (26634 54954 458672 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 296 . 297) (nil fontified nil 257 . 297) (257 . 297)) nil (26634 54954 458665 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -261) 257) nil (26634 54954 458665 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -276) 272) nil (26634 54954 458664 0) 0 nil])
([nil nil ((287 . 292) 272) nil (26634 54954 458664 0) 0 nil])
([nil nil ((289 . 293) (#("    " 0 4 (fontified nil)) . 288) (undo-tree-id2487 . -4) (292 . 293)) nil (26634 54954 458664 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -293) (undo-tree-id2486 . -1) (293 . 294)) nil (26634 54954 458663 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -289) (undo-tree-id2485 . -4) 293) nil (26634 54954 458662 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 296 . 297) (#("
" 0 1 (fontified nil)) . -368) (288 . 369)) nil (26634 54954 458661 0) 0 nil])
([nil nil ((#("    " 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t)) . -293) (undo-tree-id2484 . -4) 297) nil (26634 54954 458661 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -370) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (365 . 371)) nil (26634 54954 458660 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -366) (undo-tree-id2462 . -4) (undo-tree-id2463 . -4) (undo-tree-id2464 . -4) (undo-tree-id2465 . -4) (undo-tree-id2466 . -4) (undo-tree-id2467 . -4) (undo-tree-id2468 . -4) (undo-tree-id2469 . -4) (undo-tree-id2470 . -4) (undo-tree-id2471 . -4) (undo-tree-id2472 . -4) (undo-tree-id2473 . -4) (undo-tree-id2474 . -4) (undo-tree-id2475 . -4) (undo-tree-id2476 . -4) 370) nil (26634 54954 458785 0) 0 nil])
([nil nil ((#("k" 0 1 (fontified nil)) . -370) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (366 . 371)) nil (26634 54962 667087 0) 0 nil] [nil nil ((1136 . 1183) (1105 . 1135) (1018 . 1065) (917 . 964) (847 . 894) (832 . 846) (705 . 752) (626 . 673) (571 . 618) (537 . 570) (462 . 509) (430 . 461) (381 . 428) (366 . 380)) ((#("# Init full wf" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 14 (face font-lock-comment-face fontified t)) . 366) (#("x_full = np.linspace(-xmax, xmax, 2*mesh + 1)  " 0 6 (face font-lock-variable-name-face fontified t) 6 7 (fontified t) 7 8 (face font-lock-operator-face fontified t) 8 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t) 21 22 (face font-lock-operator-face fontified t) 22 35 (fontified t) 35 36 (face font-lock-operator-face fontified t) 36 41 (fontified t) 41 42 (face font-lock-operator-face fontified t) 42 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-1-face) fontified t) 45 47 (fontified t)) . 381) (#("psi_full = np.zeros(2*mesh + 1)" 0 8 (face font-lock-variable-name-face fontified t) 8 9 (fontified t) 9 10 (face font-lock-operator-face fontified t) 10 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-1-face) fontified t) 20 21 (fontified t) 21 22 (face font-lock-operator-face fontified t) 22 27 (fontified t) 27 28 (face font-lock-operator-face fontified t) 28 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t)) . 430) (#("                                               " 0 47 (fontified t)) . 462) (#("# Fill the positive half (x >= 0)" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 25 (face font-lock-comment-face fontified t) 25 32 (face font-lock-comment-face fontified t) 32 33 (face font-lock-comment-face fontified t)) . 537) (#("psi_full[mesh:] = psi                          " 0 8 (face font-lock-variable-name-face fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t) 9 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 16 (fontified t) 16 17 (face font-lock-operator-face fontified t) 17 21 (fontified t) 21 47 (fontified t)) . 571) (#("                                               " 0 47 (fontified t)) . 626) (#("# Fill the negative half (x < 0) using symmetry" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 47 (face font-lock-comment-face fontified t)) . 705) (#("if i % 2 == 0:" 0 2 (face font-lock-keyword-face fontified t) 2 5 (fontified t) 5 6 (face font-lock-operator-face fontified t) 6 9 (fontified t) 9 11 (face font-lock-operator-face fontified t) 11 14 (fontified t)) . 832) (#("    # Even state: ψ(-x) = ψ(x)                 " 0 4 (fontified t) 4 6 (face font-lock-comment-delimiter-face fontified t) 6 30 (face font-lock-comment-face fontified t) 30 47 (face font-lock-comment-face fontified t)) . 847) (#("    psi_full[:mesh] = np.flip(psi[1:])         " 0 4 (fontified t) 4 12 (face font-lock-variable-name-face fontified t) 12 13 (face (rainbow-delimiters-depth-1-face) fontified t) 13 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 20 (fontified t) 20 21 (face font-lock-operator-face fontified t) 21 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t) 30 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-2-face) fontified t) 34 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 47 (fontified t)) . 917) (#("else:                                          " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 47 (fontified t)) . 1018) (#("    # Odd state: ψ(-x) = -ψ(x)" 0 4 (fontified t) 4 6 (face font-lock-comment-delimiter-face fontified t) 6 30 (face font-lock-comment-face fontified t)) . 1105) (#("    psi_full[:mesh] = -np.flip(psi[1:])        " 0 4 (fontified t) 4 12 (face font-lock-variable-name-face fontified t) 12 13 (face (rainbow-delimiters-depth-1-face) fontified t) 13 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 20 (fontified t) 20 21 (face font-lock-operator-face fontified t) 21 22 (fontified t) 22 23 (face font-lock-operator-face fontified t) 23 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-2-face) fontified t) 38 39 (face (rainbow-delimiters-depth-1-face) fontified t) 39 47 (fontified t)) . 1136) (undo-tree-id2506 . -46)) (26634 54954 458639 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -384) (undo-tree-id2809 . -1) (380 . 385) (#("    " 0 4 (fontified nil)) . 379) (undo-tree-id2810 . -4) (379 . 384) (#("    " 0 4 (fontified nil)) . 378) (undo-tree-id2811 . -4) (378 . 383) (#("    " 0 4 (fontified nil)) . 377) (undo-tree-id2812 . -4) (377 . 382) (#("    " 0 4 (fontified nil)) . 376) (undo-tree-id2813 . -4) (376 . 381) (#("    " 0 4 (fontified nil)) . 375) (undo-tree-id2814 . -4) (375 . 380) (#("    " 0 4 (fontified nil)) . 374) (undo-tree-id2815 . -4) (374 . 379) (#("    " 0 4 (fontified nil)) . 373) (undo-tree-id2816 . -4) (373 . 378) (#("    " 0 4 (fontified nil)) . 372) (undo-tree-id2817 . -4) (372 . 377) (#("    " 0 4 (fontified nil)) . 371) (undo-tree-id2818 . -4) (371 . 376) (#("    " 0 4 (fontified nil)) . 370) (undo-tree-id2819 . -4) (370 . 375) (#("    " 0 4 (fontified nil)) . 369) (undo-tree-id2820 . -4) (369 . 374) (#("    " 0 4 (fontified nil)) . 368) (undo-tree-id2821 . -4) (368 . 373) (#("    " 0 4 (fontified nil)) . 367) (undo-tree-id2822 . -4) (367 . 372) (#("    " 0 3 (fontified nil) 3 4 (rear-nonsticky nil fontified nil)) . 366) (undo-tree-id2823 . -4) (undo-tree-id2824 . -3) (undo-tree-id2825 . -4) (370 . 371)) nil (26634 55297 51707 0) 0 nil] [nil nil ((nil rear-nonsticky nil 369 . 370) (1161 . 1208) (1122 . 1156) (1039 . 1086) (938 . 985) (868 . 915) (845 . 863) (722 . 769) (643 . 690) (588 . 635) (546 . 583) (475 . 522) (435 . 470) (386 . 434) (370 . 384) 369) ((#("# Init full wf" 0 2 (face font-lock-comment-delimiter-face fontified nil) 2 14 (face font-lock-comment-face fontified nil)) . 370) (#("   x_full = np.linspace(-xmax, xmax, 2*mesh + 1)" 0 3 (fontified t) 3 9 (face font-lock-variable-name-face fontified t) 9 10 (fontified t) 10 11 (face font-lock-operator-face fontified t) 11 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 25 (face font-lock-operator-face fontified t) 25 38 (fontified t) 38 39 (face font-lock-operator-face fontified t) 39 44 (fontified t) 44 45 (face font-lock-operator-face fontified t) 45 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-1-face) fontified t)) . 386) (#("    psi_full = np.zeros(2*mesh + 1)" 0 4 (fontified t) 4 12 (face font-lock-variable-name-face fontified t) 12 13 (fontified t) 13 14 (face font-lock-operator-face fontified t) 14 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 25 (fontified t) 25 26 (face font-lock-operator-face fontified t) 26 31 (fontified t) 31 32 (face font-lock-operator-face fontified t) 32 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-1-face) fontified t)) . 435) (#("                                               " 0 47 (fontified t)) . 475) (#("    # Fill the positive half (x >= 0)" 0 4 (fontified t) 4 6 (face font-lock-comment-delimiter-face fontified t) 6 29 (face font-lock-comment-face fontified t) 29 36 (face font-lock-comment-face fontified t) 36 37 (face font-lock-comment-face fontified t)) . 546) (#("psi_full[mesh:] = psi                          " 0 8 (face font-lock-variable-name-face fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t) 9 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 16 (fontified t) 16 17 (face font-lock-operator-face fontified t) 17 21 (fontified t) 21 47 (fontified t)) . 588) (#("                                               " 0 47 (fontified t)) . 643) (#("# Fill the negative half (x < 0) using symmetry" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 47 (face font-lock-comment-face fontified t)) . 722) (#("    if i % 2 == 0:" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 9 (fontified t) 9 10 (face font-lock-operator-face fontified t) 10 13 (fontified t) 13 15 (face font-lock-operator-face fontified t) 15 18 (fontified t)) . 845) (#("    # Even state: ψ(-x) = ψ(x)                 " 0 4 (fontified t) 4 6 (face font-lock-comment-delimiter-face fontified t) 6 30 (face font-lock-comment-face fontified t) 30 47 (face font-lock-comment-face fontified t)) . 868) (#("    psi_full[:mesh] = np.flip(psi[1:])         " 0 4 (fontified t) 4 12 (face font-lock-variable-name-face fontified t) 12 13 (face (rainbow-delimiters-depth-1-face) fontified t) 13 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 20 (fontified t) 20 21 (face font-lock-operator-face fontified t) 21 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t) 30 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-2-face) fontified t) 34 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 47 (fontified t)) . 938) (#("else:                                          " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 47 (fontified t)) . 1039) (#("        # Odd state: ψ(-x) = -ψ(x)" 0 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 34 (face font-lock-comment-face fontified t)) . 1122) (#("    psi_full[:mesh] = -np.flip(psi[1:])        " 0 4 (fontified t) 4 12 (face font-lock-variable-name-face fontified t) 12 13 (face (rainbow-delimiters-depth-1-face) fontified t) 13 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 20 (fontified t) 20 21 (face font-lock-operator-face fontified t) 21 22 (fontified t) 22 23 (face font-lock-operator-face fontified t) 23 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-2-face) fontified t) 38 39 (face (rainbow-delimiters-depth-1-face) fontified t) 39 47 (fontified t)) . 1161) (undo-tree-id2514 . -46) (nil rear-nonsticky t 369 . 370)) (26634 54962 666945 0) 0 nil])
nil
([nil nil ((#("    " 0 4 (fontified nil)) . -380) (undo-tree-id2808 . -4) 384) nil (26634 55297 51702 0) 0 nil])
nil
([nil nil ((#("j" 0 1 (fontified nil)) . -370) (undo-tree-id2807 . -1) (366 . 371)) nil (26634 55297 51701 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 369 . 370) (731 . 774) (696 . 730) (686 . 695) (643 . 685) (608 . 642) (589 . 607) (537 . 588) (510 . 535) (472 . 509) (435 . 470) (385 . 434) (370 . 384) 369) nil (26634 55297 51700 0) 0 nil])
([nil nil ((775 . 785)) nil (26634 55297 51699 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -790) (undo-tree-id2806 . -1) (785 . 791)) nil (26634 55297 51699 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -783) (undo-tree-id2805 . -1) (774 . 784) 745) nil (26634 55297 51698 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -775) (undo-tree-id2804 . -8) 783) nil (26634 55297 51697 0) 0 nil])
([nil nil ((#("
    for i in range(states):

       
        # Get the actual result
        e, iterations, psi = harmonic_oscillator(nodes=i, mesh=mesh, xmax=xmax)

        # Init full wf
        x_full = np.linspace(-xmax, xmax, 2*mesh + 1)
        psi_full = np.zeros(2*mesh + 1)

        # Fill the positive half (x >= 0)
        psi_full[mesh:] = psi

        # Fill the negative half (x < 0) using symmetry
        if i % 2 == 0:
            # Even state: ψ(-x) = ψ(x)
            psi_full[:mesh] = np.flip(psi[1:])
        else:
            # Odd state: ψ(-x) = -ψ(x)
            psi_full[:mesh] = -np.flip(psi[1:])

" 0 1 (fontified t) 1 5 (fontified t) 5 8 (face font-lock-keyword-face fontified t) 8 11 (fontified t) 11 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 19 (face font-lock-builtin-face fontified t) 19 20 (face (rainbow-delimiters-depth-1-face) fontified t) 20 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 34 (fontified t) 34 37 (fontified t) 37 38 (fontified t) 38 42 (fontified t) 42 46 (fontified t) 46 48 (face font-lock-comment-delimiter-face fontified t) 48 70 (face font-lock-comment-face fontified t) 70 74 (fontified t) 74 78 (fontified t) 78 79 (face font-lock-variable-name-face fontified t) 79 81 (fontified t) 81 91 (face font-lock-variable-name-face fontified t) 91 93 (fontified t) 93 96 (face font-lock-variable-name-face fontified t) 96 97 (fontified t) 97 98 (face font-lock-operator-face fontified t) 98 118 (fontified t) 118 119 (face (rainbow-delimiters-depth-1-face) fontified t) 119 124 (fontified t) 124 125 (face font-lock-operator-face fontified t) 125 132 (fontified t) 132 133 (face font-lock-operator-face fontified t) 133 143 (fontified t) 143 144 (face font-lock-operator-face fontified t) 144 148 (fontified t) 148 149 (face (rainbow-delimiters-depth-1-face) fontified t) 149 150 (fontified t) 150 151 (fontified t) 151 155 (fontified t) 155 159 (fontified t) 159 161 (face font-lock-comment-delimiter-face fontified t) 161 173 (face font-lock-comment-face fontified t) 173 174 (face font-lock-comment-face fontified t) 174 178 (fontified t) 178 182 (fontified t) 182 188 (face font-lock-variable-name-face fontified t) 188 189 (fontified t) 189 190 (face font-lock-operator-face fontified t) 190 202 (fontified t) 202 203 (face (rainbow-delimiters-depth-1-face) fontified t) 203 204 (face font-lock-operator-face fontified t) 204 217 (fontified t) 217 218 (face font-lock-operator-face fontified t) 218 223 (fontified t) 223 224 (face font-lock-operator-face fontified t) 224 226 (fontified t) 226 227 (face (rainbow-delimiters-depth-1-face) fontified t) 227 228 (fontified t) 228 232 (fontified t) 232 236 (fontified t) 236 244 (face font-lock-variable-name-face fontified t) 244 245 (fontified t) 245 246 (face font-lock-operator-face fontified t) 246 255 (fontified t) 255 256 (face (rainbow-delimiters-depth-1-face) fontified t) 256 257 (fontified t) 257 258 (face font-lock-operator-face fontified t) 258 263 (fontified t) 263 264 (face font-lock-operator-face fontified t) 264 266 (fontified t) 266 267 (face (rainbow-delimiters-depth-1-face) fontified t) 267 268 (fontified t) 268 269 (fontified t) 269 273 (fontified t) 273 277 (fontified t) 277 279 (face font-lock-comment-delimiter-face fontified t) 279 302 (face font-lock-comment-face fontified t) 302 309 (face font-lock-comment-face fontified t) 309 310 (face font-lock-comment-face fontified t) 310 311 (face font-lock-comment-face fontified t) 311 319 (fontified t) 319 327 (face font-lock-variable-name-face fontified t) 327 328 (face (rainbow-delimiters-depth-1-face) fontified t) 328 333 (fontified t) 333 334 (face (rainbow-delimiters-depth-1-face) fontified t) 334 335 (fontified t) 335 336 (face font-lock-operator-face fontified t) 336 340 (fontified t) 340 341 (fontified t) 341 342 (fontified t) 342 350 (fontified t) 350 352 (face font-lock-comment-delimiter-face fontified t) 352 398 (face font-lock-comment-face fontified t) 398 406 (fontified t) 406 408 (face font-lock-keyword-face fontified t) 408 411 (fontified t) 411 412 (face font-lock-operator-face fontified t) 412 415 (fontified t) 415 417 (face font-lock-operator-face fontified t) 417 421 (fontified t) 421 433 (fontified t) 433 435 (face font-lock-comment-delimiter-face fontified t) 435 460 (face font-lock-comment-face fontified t) 460 472 (fontified t) 472 480 (face font-lock-variable-name-face fontified t) 480 481 (face (rainbow-delimiters-depth-1-face) fontified t) 481 486 (fontified t) 486 487 (face (rainbow-delimiters-depth-1-face) fontified t) 487 488 (fontified t) 488 489 (face font-lock-operator-face fontified t) 489 497 (fontified t) 497 498 (face (rainbow-delimiters-depth-1-face) fontified t) 498 501 (fontified t) 501 502 (face (rainbow-delimiters-depth-2-face) fontified t) 502 504 (fontified t) 504 505 (face (rainbow-delimiters-depth-2-face) fontified t) 505 506 (face (rainbow-delimiters-depth-1-face) fontified t) 506 507 (fontified t) 507 515 (fontified t) 515 519 (face font-lock-keyword-face fontified t) 519 521 (fontified t) 521 533 (fontified t) 533 535 (face font-lock-comment-delimiter-face fontified t) 535 560 (face font-lock-comment-face fontified t) 560 572 (fontified t) 572 580 (face font-lock-variable-name-face fontified t) 580 581 (face (rainbow-delimiters-depth-1-face) fontified t) 581 586 (fontified t) 586 587 (face (rainbow-delimiters-depth-1-face) fontified t) 587 588 (fontified t) 588 589 (face font-lock-operator-face fontified t) 589 590 (fontified t) 590 591 (face font-lock-operator-face fontified t) 591 598 (fontified t) 598 599 (face (rainbow-delimiters-depth-1-face) fontified t) 599 602 (fontified t) 602 603 (face (rainbow-delimiters-depth-2-face) fontified t) 603 605 (fontified t) 605 606 (face (rainbow-delimiters-depth-2-face) fontified t) 606 607 (face (rainbow-delimiters-depth-1-face) fontified t) 607 608 (fontified t) 608 609 (fontified t rear-nonsticky t)) . 794) (undo-tree-id2774 . -268) (undo-tree-id2775 . -608) (undo-tree-id2776 . -608) (undo-tree-id2777 . -608) (undo-tree-id2778 . -38) (undo-tree-id2779 . -609) (undo-tree-id2780 . -609) (undo-tree-id2781 . -609) (undo-tree-id2782 . -609) (undo-tree-id2783 . -30) (undo-tree-id2784 . -150) (undo-tree-id2785 . -150) (undo-tree-id2786 . -144) (undo-tree-id2787 . -144) (undo-tree-id2788 . -341) (undo-tree-id2789 . -268) (undo-tree-id2790 . -268) (undo-tree-id2791 . -268) (undo-tree-id2792 . -268) (undo-tree-id2793 . -609) (undo-tree-id2794 . -609) (undo-tree-id2795 . -30) (undo-tree-id2796 . -609) (undo-tree-id2797 . -609) (undo-tree-id2798 . -420) (undo-tree-id2799 . -419) (undo-tree-id2800 . -30) (undo-tree-id2801 . -607) (undo-tree-id2802 . -29) (undo-tree-id2803 . -608) 1402) nil (26634 55297 51696 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -794) (undo-tree-id2773 . -1) (793 . 795) 792) nil (26634 55297 51689 0) 0 nil])
([nil nil ((#("# Example usage:
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 17 (face font-lock-comment-face fontified t)) . 795) (undo-tree-id2771 . -16) (undo-tree-id2772 . 17)) nil (26634 55297 51688 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 253)) nil (26634 55297 51687 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -339) (undo-tree-id2770 . -1) 340) nil (26634 55297 51687 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -344) (undo-tree-id2769 . -1) (339 . 345)) nil (26634 55297 51686 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -599) (undo-tree-id2768 . -1) 600) nil (26634 55297 51686 0) 0 nil])
([nil nil ((599 . 601)) nil (26634 55297 51685 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -604) (undo-tree-id2767 . -1) (601 . 605)) nil (26634 55297 51685 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -44) (undo-tree-id2766 . -1) (37 . 45)) nil (26634 55297 51684 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -43) (undo-tree-id2765 . -1) 44) nil (26634 55297 51683 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -44) (undo-tree-id2764 . -1) (43 . 45)) nil (26634 55297 51682 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -805) (undo-tree-id2763 . -1) (797 . 806)) nil (26634 55297 51682 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -816) (undo-tree-id2762 . -1) (813 . 817)) nil (26634 55297 51681 0) 0 nil])
([nil nil ((816 . 817) 815) nil (26634 55297 51681 0) 0 nil])
([nil nil ((817 . 818)) nil (26634 55297 51680 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1693 . 1694) (nil fontified nil 818 . 1694) (818 . 1694)) nil (26634 55297 51680 0) 0 nil])
([nil nil ((1696 . 1700) (#(" " 0 1 (fontified nil rear-nonsticky t)) . 1695) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (1696 . 1697)) nil (26634 55297 51679 0) 0 nil])
([nil nil ((#("k" 0 1 (fontified nil)) . -1696) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (1696 . 1697) (#("    " 0 4 (fontified t)) . -1696) (undo-tree-id2722 . -4) (undo-tree-id2723 . -4) (undo-tree-id2724 . -4) (undo-tree-id2725 . -4) (undo-tree-id2726 . -4) (undo-tree-id2727 . -4) (undo-tree-id2728 . -4) (undo-tree-id2729 . -4) (undo-tree-id2730 . -4) (undo-tree-id2731 . -4) (undo-tree-id2732 . -4) (undo-tree-id2733 . -4) (undo-tree-id2734 . -4) (undo-tree-id2735 . -4) (undo-tree-id2736 . -4) (undo-tree-id2737 . -4) 1700) nil (26634 55297 51673 0) 0 nil])
([nil nil ((1696 . 1697)) nil (26634 55297 51667 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -1696) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (1696 . 1697) (#("k" 0 1 (fontified t)) . -1696) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) 1697) nil (26634 55297 51667 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1818 . 1819) (nil fontified nil 1696 . 1819) (1696 . 1819)) nil (26634 55297 51663 0) 0 nil])
([nil nil ((#("
if __name__ == \"__main__\":
    harmonic_oscillator_wf(states=5)
" 0 1 (fontified t) 1 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 12 (face font-lock-builtin-face fontified t) 12 13 (fontified t) 13 15 (face font-lock-operator-face fontified t) 15 16 (fontified t) 16 26 (face font-lock-string-face fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-1-face) fontified t) 55 61 (fontified t) 61 62 (face font-lock-operator-face fontified t) 62 63 (fontified t) 63 64 (face (rainbow-delimiters-depth-1-face) fontified t) 64 65 (fontified t rear-nonsticky t)) . 1820) (undo-tree-id2515 . -1) (undo-tree-id2516 . -65) (undo-tree-id2517 . -64) (undo-tree-id2518 . -65) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -65) (undo-tree-id2558 . -65) (undo-tree-id2559 . -65) (undo-tree-id2560 . -65) (undo-tree-id2561 . -65) (undo-tree-id2562 . -65) (undo-tree-id2563 . -65) (undo-tree-id2564 . -65) (undo-tree-id2565 . -65) (undo-tree-id2566 . -65) (undo-tree-id2567 . -65) (undo-tree-id2568 . -65) (undo-tree-id2569 . -65) (undo-tree-id2570 . -65) (undo-tree-id2571 . -65) (undo-tree-id2572 . -65) (undo-tree-id2573 . -65) (undo-tree-id2574 . -65) (undo-tree-id2575 . -65) (undo-tree-id2576 . -65) (undo-tree-id2577 . -65) (undo-tree-id2578 . -65) (undo-tree-id2579 . -65) (undo-tree-id2580 . -65) (undo-tree-id2581 . -65) (undo-tree-id2582 . -65) (undo-tree-id2583 . -65) (undo-tree-id2584 . -65) (undo-tree-id2585 . -65) (undo-tree-id2586 . -65) (undo-tree-id2587 . -65) (undo-tree-id2588 . -65) (undo-tree-id2589 . -65) (undo-tree-id2590 . -65) (undo-tree-id2591 . -65) (undo-tree-id2592 . -65) (undo-tree-id2593 . -65) (undo-tree-id2594 . -65) (undo-tree-id2595 . -65) (undo-tree-id2596 . -65) (undo-tree-id2597 . -65) (undo-tree-id2598 . -65) (undo-tree-id2599 . -65) (undo-tree-id2600 . -65) (undo-tree-id2601 . -65) (undo-tree-id2602 . -65) (undo-tree-id2603 . -65) (undo-tree-id2604 . -65) (undo-tree-id2605 . -65) (undo-tree-id2606 . -65) (undo-tree-id2607 . -65) (undo-tree-id2608 . -65) (undo-tree-id2609 . -65) (undo-tree-id2610 . -65) (undo-tree-id2611 . -65) (undo-tree-id2612 . -65) (undo-tree-id2613 . -65) (undo-tree-id2614 . -65) (undo-tree-id2615 . -65) (undo-tree-id2616 . -65) (undo-tree-id2617 . -65) (undo-tree-id2618 . -65) (undo-tree-id2619 . -65) (undo-tree-id2620 . -65) (undo-tree-id2621 . -65) (undo-tree-id2622 . -65) (undo-tree-id2623 . -65) (undo-tree-id2624 . -65) (undo-tree-id2625 . -65) (undo-tree-id2626 . -65) (undo-tree-id2627 . -65) (undo-tree-id2628 . -65) (undo-tree-id2629 . -65) (undo-tree-id2630 . -65) (undo-tree-id2631 . -65) (undo-tree-id2632 . -65) (undo-tree-id2633 . -65) (undo-tree-id2634 . -65) (undo-tree-id2635 . -65) (undo-tree-id2636 . -65) (undo-tree-id2637 . -65) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -65) (undo-tree-id2645 . -65) (undo-tree-id2646 . -65) (undo-tree-id2647 . -65) (undo-tree-id2648 . -65) (undo-tree-id2649 . -65) (undo-tree-id2650 . -65) (undo-tree-id2651 . -65) (undo-tree-id2652 . -65) (undo-tree-id2653 . -65) (undo-tree-id2654 . -65) (undo-tree-id2655 . -65) (undo-tree-id2656 . -65) (undo-tree-id2657 . -65) (undo-tree-id2658 . -65) (undo-tree-id2659 . -65) (undo-tree-id2660 . -65) (undo-tree-id2661 . -65) (undo-tree-id2662 . -65) (undo-tree-id2663 . -65) (undo-tree-id2664 . -65) (undo-tree-id2665 . -65) (undo-tree-id2666 . -65) (undo-tree-id2667 . -65) (undo-tree-id2668 . -28) (undo-tree-id2669 . -28) (undo-tree-id2670 . -28) (undo-tree-id2671 . -28) (undo-tree-id2672 . -28) (undo-tree-id2673 . -28) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -28) (undo-tree-id2687 . -28) (undo-tree-id2688 . -28) (undo-tree-id2689 . -28) (undo-tree-id2690 . -28) (undo-tree-id2691 . -65) (undo-tree-id2692 . -65) (undo-tree-id2693 . -65) (undo-tree-id2694 . -65) (undo-tree-id2695 . -1) (undo-tree-id2696 . -65) (undo-tree-id2697 . -65) (undo-tree-id2698 . -65) (undo-tree-id2699 . -65) (undo-tree-id2700 . -65) 1885) nil (26634 55297 51660 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -798) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (790 . 799) (t 26634 55297 57882 213000)) nil (26634 55310 323501 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -794) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (794 . 795) (#("    " 0 4 (fontified t)) . -794) (undo-tree-id2833 . -4) (undo-tree-id2834 . -4) (undo-tree-id2835 . -4) (undo-tree-id2836 . -4) (undo-tree-id2837 . -4) (undo-tree-id2838 . -4) (undo-tree-id2839 . -4) (undo-tree-id2840 . -4) (undo-tree-id2841 . -4) (undo-tree-id2842 . -4) (undo-tree-id2843 . -4) (undo-tree-id2844 . -4) (undo-tree-id2845 . -4) (undo-tree-id2846 . -3) (undo-tree-id2847 . -3) (undo-tree-id2848 . -3) (undo-tree-id2849 . -3) (undo-tree-id2850 . -3) (undo-tree-id2851 . -3) (undo-tree-id2852 . -3) (undo-tree-id2853 . -4) (undo-tree-id2854 . -4) (undo-tree-id2855 . -4) (undo-tree-id2856 . -4) (undo-tree-id2857 . -4) (undo-tree-id2858 . -4) (undo-tree-id2859 . -4) (undo-tree-id2860 . -4) (undo-tree-id2861 . -4) (undo-tree-id2862 . -4) (undo-tree-id2863 . -4) 798) nil (26634 55310 323494 0) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -1776) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) 1777 (t 26634 55310 329092 223000)) nil (26634 55344 717960 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -1777) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (1776 . 1778)) nil (26634 55344 717951 0) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -1776) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) 1777 (t 26634 55344 723472 422000)) nil (26634 55353 108240 0) 0 nil])
([nil current ((#("j" 0 1 (fontified nil)) . -1777) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (1776 . 1778)) nil (26634 55353 108224 0) 0 nil])
nil
