(undo-tree-save-format-version . 1)
"50288a93230deb40993a74f6e875abeccf459456"
[nil nil nil nil (26634 55550 169892 0) 0 nil]
([nil nil ((nil rear-nonsticky nil 723 . 724) (nil fontified nil 1 . 724) (1 . 724) (t . -1)) nil (26634 55550 169892 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 227 . 228) (nil fontified nil 52 . 228) (52 . 228)) nil (26634 55550 169891 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 821 . 822) (nil fontified nil 228 . 822) (228 . 822)) nil (26634 55550 169891 0) 0 nil])
([nil nil ((1494 . 1495) 1484) nil (26634 55550 169890 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -1496) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (1495 . 1497)) nil (26634 55550 169888 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2701 . 2702) (nil fontified nil 1496 . 2702) (1496 . 2702) (t 26634 55550 172688 340000)) nil (26634 55762 302544 0) 0 nil])
([nil nil ((#("# Define the states to plot (n=0,1,2,3)
states_to_plot = [0, 1, 2, 3]

plt.figure(figsize=(10, 6))

for n in states_to_plot:
    # Generate wavefunction for state `n`
    x, psi, energy = harmonic_oscillator_wf(state=n)
    
    # Plot with a label (showing n and energy)
    plt.plot(x, psi, label=f\"n = {n}, E = {energy:.3f}\")

# Add styling
plt.title(\"Harmonic Oscillator Wavefunctions\", fontsize=14)
plt.xlabel(\"Position (x)\", fontsize=12)
plt.ylabel(\"Ïˆ(x)\", fontsize=12)
plt.axhline(0, color='black', linestyle='--', linewidth=0.5)
plt.axvline(0, color='black', linestyle='--', linewidth=0.5)
plt.grid(alpha=0.3)
plt.legend(fontsize=10)
plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 40 (face font-lock-comment-face fontified t) 40 54 (face font-lock-variable-name-face fontified t) 54 55 (fontified t) 55 56 (face font-lock-operator-face fontified t) 56 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-1-face) fontified t) 58 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-1-face) fontified t) 69 81 (fontified t) 81 82 (face (rainbow-delimiters-depth-1-face) fontified t) 82 89 (fontified t) 89 90 (face font-lock-operator-face fontified t) 90 91 (face (rainbow-delimiters-depth-2-face) fontified t) 91 96 (fontified t) 96 97 (face (rainbow-delimiters-depth-2-face) fontified t) 97 98 (face (rainbow-delimiters-depth-1-face) fontified t) 98 100 (fontified t) 100 103 (face font-lock-keyword-face fontified t) 103 106 (fontified t) 106 108 (face font-lock-keyword-face fontified t) 108 129 (fontified t) 129 131 (face font-lock-comment-delimiter-face fontified t) 131 167 (face font-lock-comment-face fontified t) 167 171 (fontified t) 171 172 (face font-lock-variable-name-face fontified t) 172 174 (fontified t) 174 177 (face font-lock-variable-name-face fontified t) 177 179 (fontified t) 179 185 (face font-lock-variable-name-face fontified t) 185 186 (fontified t) 186 187 (face font-lock-operator-face fontified t) 187 210 (fontified t) 210 211 (face (rainbow-delimiters-depth-1-face) fontified t) 211 216 (fontified t) 216 217 (face font-lock-operator-face fontified t) 217 218 (fontified t) 218 219 (face (rainbow-delimiters-depth-1-face) fontified t) 219 229 (fontified t) 229 231 (face font-lock-comment-delimiter-face fontified t) 231 272 (face font-lock-comment-face fontified t) 272 284 (fontified t) 284 285 (face (rainbow-delimiters-depth-1-face) fontified t) 285 298 (fontified t) 298 299 (face font-lock-operator-face fontified t) 299 300 (fontified t) 300 305 (face font-lock-string-face fontified t) 305 308 (face nil fontified t) 308 314 (face font-lock-string-face fontified t) 314 326 (face nil fontified t) 326 327 (face font-lock-string-face fontified t) 327 328 (face (rainbow-delimiters-depth-1-face) fontified t) 328 330 (fontified t) 330 332 (face font-lock-comment-delimiter-face fontified t) 332 344 (face font-lock-comment-face fontified t) 344 353 (fontified t) 353 354 (face (rainbow-delimiters-depth-1-face) fontified t) 354 389 (face font-lock-string-face fontified t) 389 399 (fontified t) 399 400 (face font-lock-operator-face fontified t) 400 402 (fontified t) 402 403 (face (rainbow-delimiters-depth-1-face) fontified t) 403 414 (fontified t) 414 415 (face (rainbow-delimiters-depth-1-face) fontified t) 415 429 (face font-lock-string-face fontified t) 429 439 (fontified t) 439 440 (face font-lock-operator-face fontified t) 440 442 (fontified t) 442 443 (face (rainbow-delimiters-depth-1-face) fontified t) 443 454 (fontified t) 454 455 (face (rainbow-delimiters-depth-1-face) fontified t) 455 461 (face font-lock-string-face fontified t) 461 471 (fontified t) 471 472 (face font-lock-operator-face fontified t) 472 474 (fontified t) 474 475 (face (rainbow-delimiters-depth-1-face) fontified t) 475 487 (fontified t) 487 488 (face (rainbow-delimiters-depth-1-face) fontified t) 488 496 (fontified t) 496 497 (face font-lock-operator-face fontified t) 497 504 (face font-lock-string-face fontified t) 504 515 (fontified t) 515 516 (face font-lock-operator-face fontified t) 516 520 (face font-lock-string-face fontified t) 520 531 (fontified t) 531 532 (face font-lock-operator-face fontified t) 532 535 (fontified t) 535 536 (face (rainbow-delimiters-depth-1-face) fontified t) 536 548 (fontified t) 548 549 (face (rainbow-delimiters-depth-1-face) fontified t) 549 557 (fontified t) 557 558 (face font-lock-operator-face fontified t) 558 565 (face font-lock-string-face fontified t) 565 576 (fontified t) 576 577 (face font-lock-operator-face fontified t) 577 581 (face font-lock-string-face fontified t) 581 592 (fontified t) 592 593 (face font-lock-operator-face fontified t) 593 596 (fontified t) 596 597 (face (rainbow-delimiters-depth-1-face) fontified t) 597 606 (fontified t) 606 607 (face (rainbow-delimiters-depth-1-face) fontified t) 607 612 (fontified t) 612 613 (face font-lock-operator-face fontified t) 613 616 (fontified t) 616 617 (face (rainbow-delimiters-depth-1-face) fontified t) 617 628 (fontified t) 628 629 (face (rainbow-delimiters-depth-1-face) fontified t) 629 637 (fontified t) 637 638 (face font-lock-operator-face fontified t) 638 640 (fontified t) 640 641 (face (rainbow-delimiters-depth-1-face) fontified t) 641 658 (fontified t) 658 659 (face (rainbow-delimiters-depth-1-face) fontified t) 659 660 (face (rainbow-delimiters-depth-1-face) fontified t) 660 661 (fontified t) 661 669 (fontified t) 669 670 (face (rainbow-delimiters-depth-1-face) fontified t) 670 671 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t) 671 672 (fontified t) 672 673 (fontified t) 673 679 (face font-lock-keyword-face fontified t) 679 686 (fontified t) 686 688 (face font-lock-keyword-face fontified t) 688 692 (fontified t) 692 698 (face font-lock-keyword-face fontified t) 698 717 (fontified t) 717 719 (face font-lock-keyword-face fontified t) 719 725 (fontified t)) . 823) (undo-tree-id7 . -724) (undo-tree-id8 . -724) (undo-tree-id9 . -670) (undo-tree-id10 . -673) (undo-tree-id11 . -724) (undo-tree-id12 . -724) (undo-tree-id13 . -724) (undo-tree-id14 . -724) (undo-tree-id15 . -724) (undo-tree-id16 . -724) (undo-tree-id17 . -701) (undo-tree-id18 . -701) (undo-tree-id19 . -701) (undo-tree-id20 . -701) (undo-tree-id21 . -701) (undo-tree-id22 . -701) (undo-tree-id23 . -682) (undo-tree-id24 . -682) (undo-tree-id25 . -682) (undo-tree-id26 . -682) (undo-tree-id27 . -682) (undo-tree-id28 . -682) (undo-tree-id29 . -672) (undo-tree-id30 . -672) (undo-tree-id31 . -672) (undo-tree-id32 . -672) (undo-tree-id33 . -672) (undo-tree-id34 . -672) (undo-tree-id35 . -670) (undo-tree-id36 . -670) (undo-tree-id37 . -670) (undo-tree-id38 . -670) (undo-tree-id39 . -670) (undo-tree-id40 . -670) (undo-tree-id41 . -651) (undo-tree-id42 . -651) (undo-tree-id43 . -651) (undo-tree-id44 . -651) (undo-tree-id45 . -651) (undo-tree-id46 . -651) (undo-tree-id47 . -627) (undo-tree-id48 . -627) (undo-tree-id49 . -627) (undo-tree-id50 . -627) (undo-tree-id51 . -627) (undo-tree-id52 . -627) (undo-tree-id53 . -607) (undo-tree-id54 . -607) (undo-tree-id55 . -607) (undo-tree-id56 . -607) (undo-tree-id57 . -607) (undo-tree-id58 . -607) (undo-tree-id59 . -546) (undo-tree-id60 . -546) (undo-tree-id61 . -546) (undo-tree-id62 . -546) (undo-tree-id63 . -546) (undo-tree-id64 . -546) (undo-tree-id65 . -485) (undo-tree-id66 . -485) (undo-tree-id67 . -485) (undo-tree-id68 . -485) (undo-tree-id69 . -485) (undo-tree-id70 . -485) (undo-tree-id71 . -453) (undo-tree-id72 . -453) (undo-tree-id73 . -453) (undo-tree-id74 . -453) (undo-tree-id75 . -453) (undo-tree-id76 . -453) (undo-tree-id77 . -413) (undo-tree-id78 . -413) (undo-tree-id79 . -413) (undo-tree-id80 . -413) (undo-tree-id81 . -413) (undo-tree-id82 . -413) (undo-tree-id83 . -353) (undo-tree-id84 . -353) (undo-tree-id85 . -353) (undo-tree-id86 . -353) (undo-tree-id87 . -353) (undo-tree-id88 . -353) (undo-tree-id89 . -339) (undo-tree-id90 . -339) (undo-tree-id91 . -339) (undo-tree-id92 . -339) (undo-tree-id93 . -339) (undo-tree-id94 . -339) (undo-tree-id95 . -329) (undo-tree-id96 . -329) (undo-tree-id97 . -329) (undo-tree-id98 . -329) (undo-tree-id99 . -329) (undo-tree-id100 . -329) (undo-tree-id101 . -281) (undo-tree-id102 . -281) (undo-tree-id103 . -281) (undo-tree-id104 . -281) (undo-tree-id105 . -281) (undo-tree-id106 . -281) (undo-tree-id107 . -234) (undo-tree-id108 . -234) (undo-tree-id109 . -234) (undo-tree-id110 . -234) (undo-tree-id111 . -234) (undo-tree-id112 . -234) (undo-tree-id113 . -223) (undo-tree-id114 . -223) (undo-tree-id115 . -223) (undo-tree-id116 . -223) (undo-tree-id117 . -223) (undo-tree-id118 . -223) (undo-tree-id119 . -176) (undo-tree-id120 . -176) (undo-tree-id121 . -176) (undo-tree-id122 . -176) (undo-tree-id123 . -176) (undo-tree-id124 . -176) (undo-tree-id125 . -223) (undo-tree-id126 . -223) (undo-tree-id127 . -223) (undo-tree-id128 . -223) (undo-tree-id129 . -223) (undo-tree-id130 . -223) (undo-tree-id131 . -234) (undo-tree-id132 . -234) (undo-tree-id133 . -234) (undo-tree-id134 . -234) (undo-tree-id135 . -234) (undo-tree-id136 . -234) (undo-tree-id137 . -281) (undo-tree-id138 . -281) (undo-tree-id139 . -281) (undo-tree-id140 . -281) (undo-tree-id141 . -281) (undo-tree-id142 . -329) (undo-tree-id143 . -329) (undo-tree-id144 . -329) (undo-tree-id145 . -329) (undo-tree-id146 . -329) (undo-tree-id147 . -329) (undo-tree-id148 . -339) (undo-tree-id149 . -339) (undo-tree-id150 . -339) (undo-tree-id151 . -339) (undo-tree-id152 . -339) (undo-tree-id153 . -339) (undo-tree-id154 . -353) (undo-tree-id155 . -353) (undo-tree-id156 . -353) (undo-tree-id157 . -353) (undo-tree-id158 . -353) (undo-tree-id159 . -413) (undo-tree-id160 . -413) (undo-tree-id161 . -413) (undo-tree-id162 . -413) (undo-tree-id163 . -413) (undo-tree-id164 . -453) (undo-tree-id165 . -453) (undo-tree-id166 . -453) (undo-tree-id167 . -453) (undo-tree-id168 . -453) (undo-tree-id169 . -485) (undo-tree-id170 . -485) (undo-tree-id171 . -485) (undo-tree-id172 . -485) (undo-tree-id173 . -485) (undo-tree-id174 . -546) (undo-tree-id175 . -546) (undo-tree-id176 . -546) (undo-tree-id177 . -546) (undo-tree-id178 . -546) (undo-tree-id179 . -607) (undo-tree-id180 . -607) (undo-tree-id181 . -607) (undo-tree-id182 . -607) (undo-tree-id183 . -607) (undo-tree-id184 . -627) (undo-tree-id185 . -627) (undo-tree-id186 . -627) (undo-tree-id187 . -627) (undo-tree-id188 . -627) (undo-tree-id189 . -651) (undo-tree-id190 . -651) (undo-tree-id191 . -651) (undo-tree-id192 . -651) (undo-tree-id193 . -651) (undo-tree-id194 . -670) (undo-tree-id195 . -670) (undo-tree-id196 . -670) (undo-tree-id197 . -670) (undo-tree-id198 . -670) (undo-tree-id199 . -670) (undo-tree-id200 . -670) (undo-tree-id201 . -670) (undo-tree-id202 . -670) (undo-tree-id203 . -670) (undo-tree-id204 . -672) (undo-tree-id205 . -672) (undo-tree-id206 . -672) (undo-tree-id207 . -672) (undo-tree-id208 . -672) (undo-tree-id209 . -672) (undo-tree-id210 . -672) (undo-tree-id211 . -672) (undo-tree-id212 . -672) (undo-tree-id213 . -672) (undo-tree-id214 . -672) (undo-tree-id215 . -682) (undo-tree-id216 . -682) (undo-tree-id217 . -682) (undo-tree-id218 . -682) (undo-tree-id219 . -682) (undo-tree-id220 . -682) (undo-tree-id221 . -701) (undo-tree-id222 . -701) (undo-tree-id223 . -701) (undo-tree-id224 . -701) (undo-tree-id225 . -701) (undo-tree-id226 . -724) (undo-tree-id227 . -724) (undo-tree-id228 . -724) (undo-tree-id229 . -724) (undo-tree-id230 . -724) (undo-tree-id231 . -724) (undo-tree-id232 . -724) (undo-tree-id233 . -724) (undo-tree-id234 . -724) (undo-tree-id235 . -724) (undo-tree-id236 . -724) (undo-tree-id237 . -724) (undo-tree-id238 . -724) (undo-tree-id239 . -724) (undo-tree-id240 . -724) (undo-tree-id241 . -724) (undo-tree-id242 . -724) (undo-tree-id243 . -724) (undo-tree-id244 . -724) (undo-tree-id245 . -692) (undo-tree-id246 . -692) (undo-tree-id247 . -692) (undo-tree-id248 . -692) (undo-tree-id249 . -692) (undo-tree-id250 . -692) (undo-tree-id251 . -692) (undo-tree-id252 . -673) (undo-tree-id253 . -673) (undo-tree-id254 . -673) (undo-tree-id255 . -673) (undo-tree-id256 . -673) (undo-tree-id257 . -672) (undo-tree-id258 . -672) (undo-tree-id259 . -672) (undo-tree-id260 . -672) (undo-tree-id261 . -672) (undo-tree-id262 . -661) (undo-tree-id263 . -661) (undo-tree-id264 . -661) (undo-tree-id265 . -661) (undo-tree-id266 . -661) (undo-tree-id267 . -642) (undo-tree-id268 . -642) (undo-tree-id269 . -642) (undo-tree-id270 . -642) (undo-tree-id271 . -642) (undo-tree-id272 . -618) (undo-tree-id273 . -618) (undo-tree-id274 . -618) (undo-tree-id275 . -618) (undo-tree-id276 . -618) (undo-tree-id277 . -598) (undo-tree-id278 . -598) (undo-tree-id279 . -598) (undo-tree-id280 . -598) (undo-tree-id281 . -598) (undo-tree-id282 . -537) (undo-tree-id283 . -537) (undo-tree-id284 . -537) (undo-tree-id285 . -537) (undo-tree-id286 . -537) (undo-tree-id287 . -476) (undo-tree-id288 . -476) (undo-tree-id289 . -476) (undo-tree-id290 . -476) (undo-tree-id291 . -476) (undo-tree-id292 . -444) (undo-tree-id293 . -444) (undo-tree-id294 . -444) (undo-tree-id295 . -444) (undo-tree-id296 . -444) (undo-tree-id297 . -404) (undo-tree-id298 . -404) (undo-tree-id299 . -404) (undo-tree-id300 . -404) (undo-tree-id301 . -404) (undo-tree-id302 . -344) (undo-tree-id303 . -344) (undo-tree-id304 . -344) (undo-tree-id305 . -344) (undo-tree-id306 . -344) (undo-tree-id307 . -330) (undo-tree-id308 . -330) (undo-tree-id309 . -330) (undo-tree-id310 . -330) (undo-tree-id311 . -330) (undo-tree-id312 . -329) (undo-tree-id313 . -329) (undo-tree-id314 . -329) (undo-tree-id315 . -329) (undo-tree-id316 . -329) (undo-tree-id317 . -272) (undo-tree-id318 . -272) (undo-tree-id319 . -272) (undo-tree-id320 . -272) (undo-tree-id321 . -272) (undo-tree-id322 . -225) (undo-tree-id323 . -225) (undo-tree-id324 . -225) (undo-tree-id325 . -225) (undo-tree-id326 . -225) (undo-tree-id327 . -220) (undo-tree-id328 . -220) (undo-tree-id329 . -220) (undo-tree-id330 . -220) (undo-tree-id331 . -220) (undo-tree-id332 . -167) (undo-tree-id333 . -167) (undo-tree-id334 . -167) (undo-tree-id335 . -167) (undo-tree-id336 . -167) (undo-tree-id337 . -125) (undo-tree-id338 . -125) (undo-tree-id339 . -125) (undo-tree-id340 . -125) (undo-tree-id341 . -125) (undo-tree-id342 . -125) (undo-tree-id343 . -100) (undo-tree-id344 . -100) (undo-tree-id345 . -100) (undo-tree-id346 . -100) (undo-tree-id347 . -100) (undo-tree-id348 . -100) (undo-tree-id349 . -99) (undo-tree-id350 . -99) (undo-tree-id351 . -99) (undo-tree-id352 . -99) (undo-tree-id353 . -99) (undo-tree-id354 . -99) (undo-tree-id355 . -71) (undo-tree-id356 . -71) (undo-tree-id357 . -71) (undo-tree-id358 . -71) (undo-tree-id359 . -71) (undo-tree-id360 . -71) (undo-tree-id361 . -70) (undo-tree-id362 . -70) (undo-tree-id363 . -70) (undo-tree-id364 . -70) (undo-tree-id365 . -70) (undo-tree-id366 . -70) (undo-tree-id367 . -40) (undo-tree-id368 . -40) (undo-tree-id369 . -40) (undo-tree-id370 . -40) (undo-tree-id371 . -40) (undo-tree-id372 . -40) (undo-tree-id373 . -673) (undo-tree-id374 . -725)) nil (26634 55762 302540 0) 0 nil])
([nil nil ((1977 . 1978) 1967) nil (26634 55762 302423 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -270) (undo-tree-id378 . -1) (260 . 271) (t 26634 55762 305367 259000)) nil (26634 55787 308717 0) 0 nil])
([nil nil ((#("    mesh = 500
    xmax = 10.0

" 0 4 (fontified t) 4 8 (face font-lock-variable-name-face fontified t) 8 9 (fontified t) 9 10 (face font-lock-operator-face fontified t) 10 19 (fontified t) 19 23 (face font-lock-variable-name-face fontified t) 23 24 (fontified t) 24 25 (face font-lock-operator-face fontified t) 25 32 (fontified t)) . 273) (undo-tree-id375 . -31) (undo-tree-id376 . -31) (undo-tree-id377 . -31)) nil (26634 55787 308715 0) 0 nil])
([nil nil ((842 . 846) (t 26634 55787 312365 105000)) nil (26634 55829 143704 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -845) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) 846) nil (26634 55829 143704 0) 0 nil])
([nil current ((#("j" 0 1 (fontified nil)) . -848) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (845 . 849)) nil (26634 55829 143699 0) 0 nil])
nil
